
Ej5_sonar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e18  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000fac  08000fac  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000fac  08000fac  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000fac  08000fac  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fac  08000fac  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fac  08000fac  00001fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fb0  08000fb0  00001fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000fb4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08000fc0  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08000fc0  000020cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a039  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001424  00000000  00000000  0000c075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0000d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fe  00000000  00000000  0000e008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000013a2  00000000  00000000  0000e906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9b6  00000000  00000000  0000fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089877  00000000  00000000  0001c65e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a5ed5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000307c  00000000  00000000  000a5f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000a8f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000f94 	.word	0x08000f94

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08000f94 	.word	0x08000f94

080001d4 <main>:
#define PCF_Address 0b0100111
const uint8_t PCF_ADDR = 0x27; //dirección del PFC =  0b0100111
//const uint8_t DELAY_1S = 0x8; //
// #define HAL_MAX_DELAY      0xFFFFFFFFU  -

int main(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
  HAL_Init();
 80001da:	f000 f8cf 	bl	800037c <HAL_Init>
  uint8_t data[12];
  //uint8_t *pData = &data;

  data[0] = 0x0F;  //0000001111 - seteo display, cursor y blinky mode
 80001de:	230f      	movs	r3, #15
 80001e0:	713b      	strb	r3, [r7, #4]
  //data[1] = 0x41;
  data[1] = 0x122; // manda el ´rimer bit de WRITE y después 'A'
 80001e2:	2322      	movs	r3, #34	@ 0x22
 80001e4:	717b      	strb	r3, [r7, #5]

  while (1){
	  transmitir(PCF_ADDR, data, 1);
 80001e6:	2327      	movs	r3, #39	@ 0x27
 80001e8:	4618      	mov	r0, r3
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2201      	movs	r2, #1
 80001ee:	4619      	mov	r1, r3
 80001f0:	f000 f818 	bl	8000224 <transmitir>
 80001f4:	e7f7      	b.n	80001e6 <main+0x12>
	...

080001f8 <TIM2_IRQHandler>:
	  HAL_TIM_Base_Start_IT(&hledtim);

	  return;
}

void TIM2_IRQHandler(void){ //TIM2 IRQ definition
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&hledtim);
 80001fc:	4807      	ldr	r0, [pc, #28]	@ (800021c <TIM2_IRQHandler+0x24>)
 80001fe:	f000 fd6e 	bl	8000cde <HAL_TIM_IRQHandler>
  flag = (flag==0)? 1: 0;
 8000202:	4b07      	ldr	r3, [pc, #28]	@ (8000220 <TIM2_IRQHandler+0x28>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	bf0c      	ite	eq
 800020a:	2301      	moveq	r3, #1
 800020c:	2300      	movne	r3, #0
 800020e:	b2db      	uxtb	r3, r3
 8000210:	461a      	mov	r2, r3
 8000212:	4b03      	ldr	r3, [pc, #12]	@ (8000220 <TIM2_IRQHandler+0x28>)
 8000214:	701a      	strb	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000028 	.word	0x20000028
 8000220:	200000c4 	.word	0x200000c4

08000224 <transmitir>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void transmitir(uint16_t DevAddress, uint8_t *pData, uint16_t Size){
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af02      	add	r7, sp, #8
 800022a:	4603      	mov	r3, r0
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	80fb      	strh	r3, [r7, #6]
 8000230:	4613      	mov	r3, r2
 8000232:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c3, DevAddress, &pData, Size, DELAY_1S);
 8000234:	2308      	movs	r3, #8
 8000236:	4618      	mov	r0, r3
 8000238:	88bb      	ldrh	r3, [r7, #4]
 800023a:	463a      	mov	r2, r7
 800023c:	88f9      	ldrh	r1, [r7, #6]
 800023e:	9000      	str	r0, [sp, #0]
 8000240:	4803      	ldr	r0, [pc, #12]	@ (8000250 <transmitir+0x2c>)
 8000242:	f000 f9f3 	bl	800062c <HAL_I2C_Master_Transmit>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000070 	.word	0x20000070

08000254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800025a:	2300      	movs	r3, #0
 800025c:	607b      	str	r3, [r7, #4]
 800025e:	4b10      	ldr	r3, [pc, #64]	@ (80002a0 <HAL_MspInit+0x4c>)
 8000260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000262:	4a0f      	ldr	r2, [pc, #60]	@ (80002a0 <HAL_MspInit+0x4c>)
 8000264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000268:	6453      	str	r3, [r2, #68]	@ 0x44
 800026a:	4b0d      	ldr	r3, [pc, #52]	@ (80002a0 <HAL_MspInit+0x4c>)
 800026c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800026e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000276:	2300      	movs	r3, #0
 8000278:	603b      	str	r3, [r7, #0]
 800027a:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <HAL_MspInit+0x4c>)
 800027c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800027e:	4a08      	ldr	r2, [pc, #32]	@ (80002a0 <HAL_MspInit+0x4c>)
 8000280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000284:	6413      	str	r3, [r2, #64]	@ 0x40
 8000286:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <HAL_MspInit+0x4c>)
 8000288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800028a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800028e:	603b      	str	r3, [r7, #0]
 8000290:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800

080002a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002a8:	bf00      	nop
 80002aa:	e7fd      	b.n	80002a8 <NMI_Handler+0x4>

080002ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002b0:	bf00      	nop
 80002b2:	e7fd      	b.n	80002b0 <HardFault_Handler+0x4>

080002b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002b8:	bf00      	nop
 80002ba:	e7fd      	b.n	80002b8 <MemManage_Handler+0x4>

080002bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <BusFault_Handler+0x4>

080002c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002c8:	bf00      	nop
 80002ca:	e7fd      	b.n	80002c8 <UsageFault_Handler+0x4>

080002cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr

080002e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002f6:	b580      	push	{r7, lr}
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002fa:	f000 f891 	bl	8000420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <SystemInit+0x20>)
 800030a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800030e:	4a05      	ldr	r2, [pc, #20]	@ (8000324 <SystemInit+0x20>)
 8000310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000328:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000360 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800032c:	f7ff ffea 	bl	8000304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000330:	480c      	ldr	r0, [pc, #48]	@ (8000364 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000332:	490d      	ldr	r1, [pc, #52]	@ (8000368 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000334:	4a0d      	ldr	r2, [pc, #52]	@ (800036c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000338:	e002      	b.n	8000340 <LoopCopyDataInit>

0800033a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800033c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800033e:	3304      	adds	r3, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000344:	d3f9      	bcc.n	800033a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000346:	4a0a      	ldr	r2, [pc, #40]	@ (8000370 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000348:	4c0a      	ldr	r4, [pc, #40]	@ (8000374 <LoopFillZerobss+0x22>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800034c:	e001      	b.n	8000352 <LoopFillZerobss>

0800034e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800034e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000350:	3204      	adds	r2, #4

08000352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000354:	d3fb      	bcc.n	800034e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000356:	f000 fdf9 	bl	8000f4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800035a:	f7ff ff3b 	bl	80001d4 <main>
  bx  lr    
 800035e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000360:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000368:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800036c:	08000fb4 	.word	0x08000fb4
  ldr r2, =_sbss
 8000370:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000374:	200000cc 	.word	0x200000cc

08000378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000378:	e7fe      	b.n	8000378 <ADC_IRQHandler>
	...

0800037c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000380:	4b0e      	ldr	r3, [pc, #56]	@ (80003bc <HAL_Init+0x40>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a0d      	ldr	r2, [pc, #52]	@ (80003bc <HAL_Init+0x40>)
 8000386:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800038a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800038c:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <HAL_Init+0x40>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0a      	ldr	r2, [pc, #40]	@ (80003bc <HAL_Init+0x40>)
 8000392:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000398:	4b08      	ldr	r3, [pc, #32]	@ (80003bc <HAL_Init+0x40>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a07      	ldr	r2, [pc, #28]	@ (80003bc <HAL_Init+0x40>)
 800039e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003a4:	2003      	movs	r0, #3
 80003a6:	f000 f90d 	bl	80005c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80003aa:	200f      	movs	r0, #15
 80003ac:	f000 f808 	bl	80003c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80003b0:	f7ff ff50 	bl	8000254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80003b4:	2300      	movs	r3, #0
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40023c00 	.word	0x40023c00

080003c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80003c8:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <HAL_InitTick+0x54>)
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <HAL_InitTick+0x58>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	4619      	mov	r1, r3
 80003d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80003da:	fbb2 f3f3 	udiv	r3, r2, r3
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 f917 	bl	8000612 <HAL_SYSTICK_Config>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80003ea:	2301      	movs	r3, #1
 80003ec:	e00e      	b.n	800040c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2b0f      	cmp	r3, #15
 80003f2:	d80a      	bhi.n	800040a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003f4:	2200      	movs	r2, #0
 80003f6:	6879      	ldr	r1, [r7, #4]
 80003f8:	f04f 30ff 	mov.w	r0, #4294967295
 80003fc:	f000 f8ed 	bl	80005da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000400:	4a06      	ldr	r2, [pc, #24]	@ (800041c <HAL_InitTick+0x5c>)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000406:	2300      	movs	r3, #0
 8000408:	e000      	b.n	800040c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800040a:	2301      	movs	r3, #1
}
 800040c:	4618      	mov	r0, r3
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000000 	.word	0x20000000
 8000418:	20000008 	.word	0x20000008
 800041c:	20000004 	.word	0x20000004

08000420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000424:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <HAL_IncTick+0x20>)
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	461a      	mov	r2, r3
 800042a:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <HAL_IncTick+0x24>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4413      	add	r3, r2
 8000430:	4a04      	ldr	r2, [pc, #16]	@ (8000444 <HAL_IncTick+0x24>)
 8000432:	6013      	str	r3, [r2, #0]
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000008 	.word	0x20000008
 8000444:	200000c8 	.word	0x200000c8

08000448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  return uwTick;
 800044c:	4b03      	ldr	r3, [pc, #12]	@ (800045c <HAL_GetTick+0x14>)
 800044e:	681b      	ldr	r3, [r3, #0]
}
 8000450:	4618      	mov	r0, r3
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	200000c8 	.word	0x200000c8

08000460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f003 0307 	and.w	r3, r3, #7
 800046e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000470:	4b0c      	ldr	r3, [pc, #48]	@ (80004a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800047c:	4013      	ands	r3, r2
 800047e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000488:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800048c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000492:	4a04      	ldr	r2, [pc, #16]	@ (80004a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	60d3      	str	r3, [r2, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	e000ed00 	.word	0xe000ed00

080004a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004ac:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <__NVIC_GetPriorityGrouping+0x18>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	0a1b      	lsrs	r3, r3, #8
 80004b2:	f003 0307 	and.w	r3, r3, #7
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr
 80004c0:	e000ed00 	.word	0xe000ed00

080004c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	6039      	str	r1, [r7, #0]
 80004ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	db0a      	blt.n	80004ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	490c      	ldr	r1, [pc, #48]	@ (8000510 <__NVIC_SetPriority+0x4c>)
 80004de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004e2:	0112      	lsls	r2, r2, #4
 80004e4:	b2d2      	uxtb	r2, r2
 80004e6:	440b      	add	r3, r1
 80004e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004ec:	e00a      	b.n	8000504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4908      	ldr	r1, [pc, #32]	@ (8000514 <__NVIC_SetPriority+0x50>)
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	f003 030f 	and.w	r3, r3, #15
 80004fa:	3b04      	subs	r3, #4
 80004fc:	0112      	lsls	r2, r2, #4
 80004fe:	b2d2      	uxtb	r2, r2
 8000500:	440b      	add	r3, r1
 8000502:	761a      	strb	r2, [r3, #24]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	e000e100 	.word	0xe000e100
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000518:	b480      	push	{r7}
 800051a:	b089      	sub	sp, #36	@ 0x24
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	f003 0307 	and.w	r3, r3, #7
 800052a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	f1c3 0307 	rsb	r3, r3, #7
 8000532:	2b04      	cmp	r3, #4
 8000534:	bf28      	it	cs
 8000536:	2304      	movcs	r3, #4
 8000538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800053a:	69fb      	ldr	r3, [r7, #28]
 800053c:	3304      	adds	r3, #4
 800053e:	2b06      	cmp	r3, #6
 8000540:	d902      	bls.n	8000548 <NVIC_EncodePriority+0x30>
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	3b03      	subs	r3, #3
 8000546:	e000      	b.n	800054a <NVIC_EncodePriority+0x32>
 8000548:	2300      	movs	r3, #0
 800054a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800054c:	f04f 32ff 	mov.w	r2, #4294967295
 8000550:	69bb      	ldr	r3, [r7, #24]
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	43da      	mvns	r2, r3
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	401a      	ands	r2, r3
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000560:	f04f 31ff 	mov.w	r1, #4294967295
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	fa01 f303 	lsl.w	r3, r1, r3
 800056a:	43d9      	mvns	r1, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000570:	4313      	orrs	r3, r2
         );
}
 8000572:	4618      	mov	r0, r3
 8000574:	3724      	adds	r7, #36	@ 0x24
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3b01      	subs	r3, #1
 800058c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000590:	d301      	bcc.n	8000596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000592:	2301      	movs	r3, #1
 8000594:	e00f      	b.n	80005b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000596:	4a0a      	ldr	r2, [pc, #40]	@ (80005c0 <SysTick_Config+0x40>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3b01      	subs	r3, #1
 800059c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800059e:	210f      	movs	r1, #15
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f7ff ff8e 	bl	80004c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <SysTick_Config+0x40>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005ae:	4b04      	ldr	r3, [pc, #16]	@ (80005c0 <SysTick_Config+0x40>)
 80005b0:	2207      	movs	r2, #7
 80005b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005b4:	2300      	movs	r3, #0
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	e000e010 	.word	0xe000e010

080005c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff ff47 	bl	8000460 <__NVIC_SetPriorityGrouping>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005da:	b580      	push	{r7, lr}
 80005dc:	b086      	sub	sp, #24
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4603      	mov	r3, r0
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
 80005e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80005ec:	f7ff ff5c 	bl	80004a8 <__NVIC_GetPriorityGrouping>
 80005f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	68b9      	ldr	r1, [r7, #8]
 80005f6:	6978      	ldr	r0, [r7, #20]
 80005f8:	f7ff ff8e 	bl	8000518 <NVIC_EncodePriority>
 80005fc:	4602      	mov	r2, r0
 80005fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000602:	4611      	mov	r1, r2
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff5d 	bl	80004c4 <__NVIC_SetPriority>
}
 800060a:	bf00      	nop
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff ffb0 	bl	8000580 <SysTick_Config>
 8000620:	4603      	mov	r3, r0
}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af02      	add	r7, sp, #8
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	607a      	str	r2, [r7, #4]
 8000636:	461a      	mov	r2, r3
 8000638:	460b      	mov	r3, r1
 800063a:	817b      	strh	r3, [r7, #10]
 800063c:	4613      	mov	r3, r2
 800063e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000640:	f7ff ff02 	bl	8000448 <HAL_GetTick>
 8000644:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b20      	cmp	r3, #32
 8000650:	f040 80e0 	bne.w	8000814 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2319      	movs	r3, #25
 800065a:	2201      	movs	r2, #1
 800065c:	4970      	ldr	r1, [pc, #448]	@ (8000820 <HAL_I2C_Master_Transmit+0x1f4>)
 800065e:	68f8      	ldr	r0, [r7, #12]
 8000660:	f000 f964 	bl	800092c <I2C_WaitOnFlagUntilTimeout>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800066a:	2302      	movs	r3, #2
 800066c:	e0d3      	b.n	8000816 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000674:	2b01      	cmp	r3, #1
 8000676:	d101      	bne.n	800067c <HAL_I2C_Master_Transmit+0x50>
 8000678:	2302      	movs	r3, #2
 800067a:	e0cc      	b.n	8000816 <HAL_I2C_Master_Transmit+0x1ea>
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2201      	movs	r2, #1
 8000680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	2b01      	cmp	r3, #1
 8000690:	d007      	beq.n	80006a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f042 0201 	orr.w	r2, r2, #1
 80006a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80006b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2221      	movs	r2, #33	@ 0x21
 80006b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	2210      	movs	r2, #16
 80006be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2200      	movs	r2, #0
 80006c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	893a      	ldrh	r2, [r7, #8]
 80006d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80006d8:	b29a      	uxth	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4a50      	ldr	r2, [pc, #320]	@ (8000824 <HAL_I2C_Master_Transmit+0x1f8>)
 80006e2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80006e4:	8979      	ldrh	r1, [r7, #10]
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	6a3a      	ldr	r2, [r7, #32]
 80006ea:	68f8      	ldr	r0, [r7, #12]
 80006ec:	f000 f89c 	bl	8000828 <I2C_MasterRequestWrite>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e08d      	b.n	8000816 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	695b      	ldr	r3, [r3, #20]
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000710:	e066      	b.n	80007e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000712:	697a      	ldr	r2, [r7, #20]
 8000714:	6a39      	ldr	r1, [r7, #32]
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f000 fa22 	bl	8000b60 <I2C_WaitOnTXEFlagUntilTimeout>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d00d      	beq.n	800073e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000726:	2b04      	cmp	r3, #4
 8000728:	d107      	bne.n	800073a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000738:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e06b      	b.n	8000816 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000742:	781a      	ldrb	r2, [r3, #0]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	1c5a      	adds	r2, r3, #1
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000758:	b29b      	uxth	r3, r3
 800075a:	3b01      	subs	r3, #1
 800075c:	b29a      	uxth	r2, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000766:	3b01      	subs	r3, #1
 8000768:	b29a      	uxth	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	2b04      	cmp	r3, #4
 800077a:	d11b      	bne.n	80007b4 <HAL_I2C_Master_Transmit+0x188>
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000780:	2b00      	cmp	r3, #0
 8000782:	d017      	beq.n	80007b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000788:	781a      	ldrb	r2, [r3, #0]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000794:	1c5a      	adds	r2, r3, #1
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800079e:	b29b      	uxth	r3, r3
 80007a0:	3b01      	subs	r3, #1
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80007ac:	3b01      	subs	r3, #1
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	6a39      	ldr	r1, [r7, #32]
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	f000 fa19 	bl	8000bf0 <I2C_WaitOnBTFFlagUntilTimeout>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00d      	beq.n	80007e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d107      	bne.n	80007dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80007da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80007dc:	2301      	movs	r3, #1
 80007de:	e01a      	b.n	8000816 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d194      	bne.n	8000712 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80007f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2220      	movs	r2, #32
 80007fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2200      	movs	r2, #0
 8000804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8000810:	2300      	movs	r3, #0
 8000812:	e000      	b.n	8000816 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000814:	2302      	movs	r3, #2
  }
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	00100002 	.word	0x00100002
 8000824:	ffff0000 	.word	0xffff0000

08000828 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af02      	add	r7, sp, #8
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	607a      	str	r2, [r7, #4]
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	460b      	mov	r3, r1
 8000836:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800083c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	2b08      	cmp	r3, #8
 8000842:	d006      	beq.n	8000852 <I2C_MasterRequestWrite+0x2a>
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d003      	beq.n	8000852 <I2C_MasterRequestWrite+0x2a>
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8000850:	d108      	bne.n	8000864 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	e00b      	b.n	800087c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000868:	2b12      	cmp	r3, #18
 800086a:	d107      	bne.n	800087c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800087a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f000 f84f 	bl	800092c <I2C_WaitOnFlagUntilTimeout>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d00d      	beq.n	80008b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800089e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008a2:	d103      	bne.n	80008ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80008ac:	2303      	movs	r3, #3
 80008ae:	e035      	b.n	800091c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80008b8:	d108      	bne.n	80008cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80008ba:	897b      	ldrh	r3, [r7, #10]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80008c8:	611a      	str	r2, [r3, #16]
 80008ca:	e01b      	b.n	8000904 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80008cc:	897b      	ldrh	r3, [r7, #10]
 80008ce:	11db      	asrs	r3, r3, #7
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	f003 0306 	and.w	r3, r3, #6
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f063 030f 	orn	r3, r3, #15
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	490e      	ldr	r1, [pc, #56]	@ (8000924 <I2C_MasterRequestWrite+0xfc>)
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f000 f898 	bl	8000a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e010      	b.n	800091c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80008fa:	897b      	ldrh	r3, [r7, #10]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	4907      	ldr	r1, [pc, #28]	@ (8000928 <I2C_MasterRequestWrite+0x100>)
 800090a:	68f8      	ldr	r0, [r7, #12]
 800090c:	f000 f888 	bl	8000a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e000      	b.n	800091c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800091a:	2300      	movs	r3, #0
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	00010008 	.word	0x00010008
 8000928:	00010002 	.word	0x00010002

0800092c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	4613      	mov	r3, r2
 800093a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800093c:	e048      	b.n	80009d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000944:	d044      	beq.n	80009d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000946:	f7ff fd7f 	bl	8000448 <HAL_GetTick>
 800094a:	4602      	mov	r2, r0
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	429a      	cmp	r2, r3
 8000954:	d302      	bcc.n	800095c <I2C_WaitOnFlagUntilTimeout+0x30>
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d139      	bne.n	80009d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	0c1b      	lsrs	r3, r3, #16
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b01      	cmp	r3, #1
 8000964:	d10d      	bne.n	8000982 <I2C_WaitOnFlagUntilTimeout+0x56>
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	43da      	mvns	r2, r3
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	4013      	ands	r3, r2
 8000972:	b29b      	uxth	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	bf0c      	ite	eq
 8000978:	2301      	moveq	r3, #1
 800097a:	2300      	movne	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	e00c      	b.n	800099c <I2C_WaitOnFlagUntilTimeout+0x70>
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	43da      	mvns	r2, r3
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	4013      	ands	r3, r2
 800098e:	b29b      	uxth	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	bf0c      	ite	eq
 8000994:	2301      	moveq	r3, #1
 8000996:	2300      	movne	r3, #0
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d116      	bne.n	80009d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	2200      	movs	r2, #0
 80009a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2220      	movs	r2, #32
 80009ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f043 0220 	orr.w	r2, r3, #32
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	e023      	b.n	8000a18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	0c1b      	lsrs	r3, r3, #16
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d10d      	bne.n	80009f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	43da      	mvns	r2, r3
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	4013      	ands	r3, r2
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf0c      	ite	eq
 80009ec:	2301      	moveq	r3, #1
 80009ee:	2300      	movne	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	e00c      	b.n	8000a10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	43da      	mvns	r2, r3
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	4013      	ands	r3, r2
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf0c      	ite	eq
 8000a08:	2301      	moveq	r3, #1
 8000a0a:	2300      	movne	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	461a      	mov	r2, r3
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d093      	beq.n	800093e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
 8000a2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000a2e:	e071      	b.n	8000b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a3e:	d123      	bne.n	8000a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8000a58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2220      	movs	r2, #32
 8000a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	f043 0204 	orr.w	r2, r3, #4
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e067      	b.n	8000b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a8e:	d041      	beq.n	8000b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000a90:	f7ff fcda 	bl	8000448 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d302      	bcc.n	8000aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d136      	bne.n	8000b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	0c1b      	lsrs	r3, r3, #16
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d10c      	bne.n	8000aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4013      	ands	r3, r2
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	bf14      	ite	ne
 8000ac2:	2301      	movne	r3, #1
 8000ac4:	2300      	moveq	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	e00b      	b.n	8000ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	43da      	mvns	r2, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	bf14      	ite	ne
 8000adc:	2301      	movne	r3, #1
 8000ade:	2300      	moveq	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d016      	beq.n	8000b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2220      	movs	r2, #32
 8000af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b00:	f043 0220 	orr.w	r2, r3, #32
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	e021      	b.n	8000b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	0c1b      	lsrs	r3, r3, #16
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d10c      	bne.n	8000b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	43da      	mvns	r2, r3
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	bf14      	ite	ne
 8000b30:	2301      	movne	r3, #1
 8000b32:	2300      	moveq	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	e00b      	b.n	8000b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	43da      	mvns	r2, r3
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	4013      	ands	r3, r2
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	bf14      	ite	ne
 8000b4a:	2301      	movne	r3, #1
 8000b4c:	2300      	moveq	r3, #0
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	f47f af6d 	bne.w	8000a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000b6c:	e034      	b.n	8000bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f000 f886 	bl	8000c80 <I2C_IsAcknowledgeFailed>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e034      	b.n	8000be8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b84:	d028      	beq.n	8000bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b86:	f7ff fc5f 	bl	8000448 <HAL_GetTick>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d302      	bcc.n	8000b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d11d      	bne.n	8000bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	695b      	ldr	r3, [r3, #20]
 8000ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba6:	2b80      	cmp	r3, #128	@ 0x80
 8000ba8:	d016      	beq.n	8000bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2200      	movs	r2, #0
 8000bae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2220      	movs	r2, #32
 8000bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f043 0220 	orr.w	r2, r3, #32
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	e007      	b.n	8000be8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000be2:	2b80      	cmp	r3, #128	@ 0x80
 8000be4:	d1c3      	bne.n	8000b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000bfc:	e034      	b.n	8000c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000bfe:	68f8      	ldr	r0, [r7, #12]
 8000c00:	f000 f83e 	bl	8000c80 <I2C_IsAcknowledgeFailed>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e034      	b.n	8000c78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c14:	d028      	beq.n	8000c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000c16:	f7ff fc17 	bl	8000448 <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	68ba      	ldr	r2, [r7, #8]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d302      	bcc.n	8000c2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d11d      	bne.n	8000c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	d016      	beq.n	8000c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	2220      	movs	r2, #32
 8000c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	f043 0220 	orr.w	r2, r3, #32
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e007      	b.n	8000c78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f003 0304 	and.w	r3, r3, #4
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	d1c3      	bne.n	8000bfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c96:	d11b      	bne.n	8000cd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8000ca0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2220      	movs	r2, #32
 8000cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbc:	f043 0204 	orr.w	r2, r3, #4
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e000      	b.n	8000cd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b084      	sub	sp, #16
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d020      	beq.n	8000d42 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d01b      	beq.n	8000d42 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f06f 0202 	mvn.w	r2, #2
 8000d12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2201      	movs	r2, #1
 8000d18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f8dc 	bl	8000ee6 <HAL_TIM_IC_CaptureCallback>
 8000d2e:	e005      	b.n	8000d3c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 f8ce 	bl	8000ed2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f000 f8df 	bl	8000efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d020      	beq.n	8000d8e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d01b      	beq.n	8000d8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f06f 0204 	mvn.w	r2, #4
 8000d5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2202      	movs	r2, #2
 8000d64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f000 f8b6 	bl	8000ee6 <HAL_TIM_IC_CaptureCallback>
 8000d7a:	e005      	b.n	8000d88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f000 f8a8 	bl	8000ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f8b9 	bl	8000efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	f003 0308 	and.w	r3, r3, #8
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d020      	beq.n	8000dda <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0308 	and.w	r3, r3, #8
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d01b      	beq.n	8000dda <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f06f 0208 	mvn.w	r2, #8
 8000daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2204      	movs	r2, #4
 8000db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	69db      	ldr	r3, [r3, #28]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 f890 	bl	8000ee6 <HAL_TIM_IC_CaptureCallback>
 8000dc6:	e005      	b.n	8000dd4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f000 f882 	bl	8000ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 f893 	bl	8000efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	f003 0310 	and.w	r3, r3, #16
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d020      	beq.n	8000e26 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d01b      	beq.n	8000e26 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f06f 0210 	mvn.w	r2, #16
 8000df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 f86a 	bl	8000ee6 <HAL_TIM_IC_CaptureCallback>
 8000e12:	e005      	b.n	8000e20 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 f85c 	bl	8000ed2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 f86d 	bl	8000efa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d00c      	beq.n	8000e4a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d007      	beq.n	8000e4a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f06f 0201 	mvn.w	r2, #1
 8000e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f83a 	bl	8000ebe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00c      	beq.n	8000e6e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d007      	beq.n	8000e6e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8000e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f000 f864 	bl	8000f36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00c      	beq.n	8000e92 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8000e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f000 f83e 	bl	8000f0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00c      	beq.n	8000eb6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0320 	and.w	r3, r3, #32
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d007      	beq.n	8000eb6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f06f 0220 	mvn.w	r2, #32
 8000eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f836 	bl	8000f22 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <__libc_init_array>:
 8000f4c:	b570      	push	{r4, r5, r6, lr}
 8000f4e:	4d0d      	ldr	r5, [pc, #52]	@ (8000f84 <__libc_init_array+0x38>)
 8000f50:	4c0d      	ldr	r4, [pc, #52]	@ (8000f88 <__libc_init_array+0x3c>)
 8000f52:	1b64      	subs	r4, r4, r5
 8000f54:	10a4      	asrs	r4, r4, #2
 8000f56:	2600      	movs	r6, #0
 8000f58:	42a6      	cmp	r6, r4
 8000f5a:	d109      	bne.n	8000f70 <__libc_init_array+0x24>
 8000f5c:	4d0b      	ldr	r5, [pc, #44]	@ (8000f8c <__libc_init_array+0x40>)
 8000f5e:	4c0c      	ldr	r4, [pc, #48]	@ (8000f90 <__libc_init_array+0x44>)
 8000f60:	f000 f818 	bl	8000f94 <_init>
 8000f64:	1b64      	subs	r4, r4, r5
 8000f66:	10a4      	asrs	r4, r4, #2
 8000f68:	2600      	movs	r6, #0
 8000f6a:	42a6      	cmp	r6, r4
 8000f6c:	d105      	bne.n	8000f7a <__libc_init_array+0x2e>
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
 8000f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f74:	4798      	blx	r3
 8000f76:	3601      	adds	r6, #1
 8000f78:	e7ee      	b.n	8000f58 <__libc_init_array+0xc>
 8000f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f7e:	4798      	blx	r3
 8000f80:	3601      	adds	r6, #1
 8000f82:	e7f2      	b.n	8000f6a <__libc_init_array+0x1e>
 8000f84:	08000fac 	.word	0x08000fac
 8000f88:	08000fac 	.word	0x08000fac
 8000f8c:	08000fac 	.word	0x08000fac
 8000f90:	08000fb0 	.word	0x08000fb0

08000f94 <_init>:
 8000f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f96:	bf00      	nop
 8000f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f9a:	bc08      	pop	{r3}
 8000f9c:	469e      	mov	lr, r3
 8000f9e:	4770      	bx	lr

08000fa0 <_fini>:
 8000fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa2:	bf00      	nop
 8000fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa6:	bc08      	pop	{r3}
 8000fa8:	469e      	mov	lr, r3
 8000faa:	4770      	bx	lr
