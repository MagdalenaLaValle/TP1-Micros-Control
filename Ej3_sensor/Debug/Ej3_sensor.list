
Ej3_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000393c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08003ad4  08003ad4  00004ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae8  08003ae8  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003ae8  08003ae8  00004ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003af0  08003af0  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af0  08003af0  00004af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af4  08003af4  00004af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08003af8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000060  08003b58  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08003b58  00005254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a01f  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000195e  00000000  00000000  0000f0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  00010a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000832  00000000  00000000  000114b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f93  00000000  00000000  00011ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd95  00000000  00000000  00028c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096ac2  00000000  00000000  00034a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb4cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003038  00000000  00000000  000cb510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ce548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003abc 	.word	0x08003abc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	08003abc 	.word	0x08003abc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b988 	b.w	8000e78 <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	468e      	mov	lr, r1
 8000b88:	4604      	mov	r4, r0
 8000b8a:	4688      	mov	r8, r1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d14a      	bne.n	8000c26 <__udivmoddi4+0xa6>
 8000b90:	428a      	cmp	r2, r1
 8000b92:	4617      	mov	r7, r2
 8000b94:	d962      	bls.n	8000c5c <__udivmoddi4+0xdc>
 8000b96:	fab2 f682 	clz	r6, r2
 8000b9a:	b14e      	cbz	r6, 8000bb0 <__udivmoddi4+0x30>
 8000b9c:	f1c6 0320 	rsb	r3, r6, #32
 8000ba0:	fa01 f806 	lsl.w	r8, r1, r6
 8000ba4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba8:	40b7      	lsls	r7, r6
 8000baa:	ea43 0808 	orr.w	r8, r3, r8
 8000bae:	40b4      	lsls	r4, r6
 8000bb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb4:	fa1f fc87 	uxth.w	ip, r7
 8000bb8:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bbc:	0c23      	lsrs	r3, r4, #16
 8000bbe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc6:	fb01 f20c 	mul.w	r2, r1, ip
 8000bca:	429a      	cmp	r2, r3
 8000bcc:	d909      	bls.n	8000be2 <__udivmoddi4+0x62>
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bd4:	f080 80ea 	bcs.w	8000dac <__udivmoddi4+0x22c>
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	f240 80e7 	bls.w	8000dac <__udivmoddi4+0x22c>
 8000bde:	3902      	subs	r1, #2
 8000be0:	443b      	add	r3, r7
 8000be2:	1a9a      	subs	r2, r3, r2
 8000be4:	b2a3      	uxth	r3, r4
 8000be6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bea:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bf2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bf6:	459c      	cmp	ip, r3
 8000bf8:	d909      	bls.n	8000c0e <__udivmoddi4+0x8e>
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c00:	f080 80d6 	bcs.w	8000db0 <__udivmoddi4+0x230>
 8000c04:	459c      	cmp	ip, r3
 8000c06:	f240 80d3 	bls.w	8000db0 <__udivmoddi4+0x230>
 8000c0a:	443b      	add	r3, r7
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c12:	eba3 030c 	sub.w	r3, r3, ip
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11d      	cbz	r5, 8000c22 <__udivmoddi4+0xa2>
 8000c1a:	40f3      	lsrs	r3, r6
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d905      	bls.n	8000c36 <__udivmoddi4+0xb6>
 8000c2a:	b10d      	cbz	r5, 8000c30 <__udivmoddi4+0xb0>
 8000c2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c30:	2100      	movs	r1, #0
 8000c32:	4608      	mov	r0, r1
 8000c34:	e7f5      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c36:	fab3 f183 	clz	r1, r3
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d146      	bne.n	8000ccc <__udivmoddi4+0x14c>
 8000c3e:	4573      	cmp	r3, lr
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xc8>
 8000c42:	4282      	cmp	r2, r0
 8000c44:	f200 8105 	bhi.w	8000e52 <__udivmoddi4+0x2d2>
 8000c48:	1a84      	subs	r4, r0, r2
 8000c4a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	4690      	mov	r8, r2
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	d0e5      	beq.n	8000c22 <__udivmoddi4+0xa2>
 8000c56:	e9c5 4800 	strd	r4, r8, [r5]
 8000c5a:	e7e2      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f000 8090 	beq.w	8000d82 <__udivmoddi4+0x202>
 8000c62:	fab2 f682 	clz	r6, r2
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f040 80a4 	bne.w	8000db4 <__udivmoddi4+0x234>
 8000c6c:	1a8a      	subs	r2, r1, r2
 8000c6e:	0c03      	lsrs	r3, r0, #16
 8000c70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c74:	b280      	uxth	r0, r0
 8000c76:	b2bc      	uxth	r4, r7
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c7e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c86:	fb04 f20c 	mul.w	r2, r4, ip
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d907      	bls.n	8000c9e <__udivmoddi4+0x11e>
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c94:	d202      	bcs.n	8000c9c <__udivmoddi4+0x11c>
 8000c96:	429a      	cmp	r2, r3
 8000c98:	f200 80e0 	bhi.w	8000e5c <__udivmoddi4+0x2dc>
 8000c9c:	46c4      	mov	ip, r8
 8000c9e:	1a9b      	subs	r3, r3, r2
 8000ca0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ca4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ca8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cac:	fb02 f404 	mul.w	r4, r2, r4
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	d907      	bls.n	8000cc4 <__udivmoddi4+0x144>
 8000cb4:	18fb      	adds	r3, r7, r3
 8000cb6:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x142>
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	f200 80ca 	bhi.w	8000e56 <__udivmoddi4+0x2d6>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	1b1b      	subs	r3, r3, r4
 8000cc6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cca:	e7a5      	b.n	8000c18 <__udivmoddi4+0x98>
 8000ccc:	f1c1 0620 	rsb	r6, r1, #32
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	fa0e f401 	lsl.w	r4, lr, r1
 8000cdc:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce0:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ce4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ce8:	4323      	orrs	r3, r4
 8000cea:	fa00 f801 	lsl.w	r8, r0, r1
 8000cee:	fa1f fc87 	uxth.w	ip, r7
 8000cf2:	fbbe f0f9 	udiv	r0, lr, r9
 8000cf6:	0c1c      	lsrs	r4, r3, #16
 8000cf8:	fb09 ee10 	mls	lr, r9, r0, lr
 8000cfc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d00:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d04:	45a6      	cmp	lr, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	d909      	bls.n	8000d20 <__udivmoddi4+0x1a0>
 8000d0c:	193c      	adds	r4, r7, r4
 8000d0e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d12:	f080 809c 	bcs.w	8000e4e <__udivmoddi4+0x2ce>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f240 8099 	bls.w	8000e4e <__udivmoddi4+0x2ce>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	443c      	add	r4, r7
 8000d20:	eba4 040e 	sub.w	r4, r4, lr
 8000d24:	fa1f fe83 	uxth.w	lr, r3
 8000d28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d30:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d34:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d38:	45a4      	cmp	ip, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x1ce>
 8000d3c:	193c      	adds	r4, r7, r4
 8000d3e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d42:	f080 8082 	bcs.w	8000e4a <__udivmoddi4+0x2ca>
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d97f      	bls.n	8000e4a <__udivmoddi4+0x2ca>
 8000d4a:	3b02      	subs	r3, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d52:	eba4 040c 	sub.w	r4, r4, ip
 8000d56:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d5a:	4564      	cmp	r4, ip
 8000d5c:	4673      	mov	r3, lr
 8000d5e:	46e1      	mov	r9, ip
 8000d60:	d362      	bcc.n	8000e28 <__udivmoddi4+0x2a8>
 8000d62:	d05f      	beq.n	8000e24 <__udivmoddi4+0x2a4>
 8000d64:	b15d      	cbz	r5, 8000d7e <__udivmoddi4+0x1fe>
 8000d66:	ebb8 0203 	subs.w	r2, r8, r3
 8000d6a:	eb64 0409 	sbc.w	r4, r4, r9
 8000d6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d72:	fa22 f301 	lsr.w	r3, r2, r1
 8000d76:	431e      	orrs	r6, r3
 8000d78:	40cc      	lsrs	r4, r1
 8000d7a:	e9c5 6400 	strd	r6, r4, [r5]
 8000d7e:	2100      	movs	r1, #0
 8000d80:	e74f      	b.n	8000c22 <__udivmoddi4+0xa2>
 8000d82:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d86:	0c01      	lsrs	r1, r0, #16
 8000d88:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d92:	463b      	mov	r3, r7
 8000d94:	4638      	mov	r0, r7
 8000d96:	463c      	mov	r4, r7
 8000d98:	46b8      	mov	r8, r7
 8000d9a:	46be      	mov	lr, r7
 8000d9c:	2620      	movs	r6, #32
 8000d9e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000da2:	eba2 0208 	sub.w	r2, r2, r8
 8000da6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000daa:	e766      	b.n	8000c7a <__udivmoddi4+0xfa>
 8000dac:	4601      	mov	r1, r0
 8000dae:	e718      	b.n	8000be2 <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e72c      	b.n	8000c0e <__udivmoddi4+0x8e>
 8000db4:	f1c6 0220 	rsb	r2, r6, #32
 8000db8:	fa2e f302 	lsr.w	r3, lr, r2
 8000dbc:	40b7      	lsls	r7, r6
 8000dbe:	40b1      	lsls	r1, r6
 8000dc0:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dce:	b2bc      	uxth	r4, r7
 8000dd0:	fb0e 3318 	mls	r3, lr, r8, r3
 8000dd4:	0c11      	lsrs	r1, r2, #16
 8000dd6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dda:	fb08 f904 	mul.w	r9, r8, r4
 8000dde:	40b0      	lsls	r0, r6
 8000de0:	4589      	cmp	r9, r1
 8000de2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000de6:	b280      	uxth	r0, r0
 8000de8:	d93e      	bls.n	8000e68 <__udivmoddi4+0x2e8>
 8000dea:	1879      	adds	r1, r7, r1
 8000dec:	f108 3cff 	add.w	ip, r8, #4294967295
 8000df0:	d201      	bcs.n	8000df6 <__udivmoddi4+0x276>
 8000df2:	4589      	cmp	r9, r1
 8000df4:	d81f      	bhi.n	8000e36 <__udivmoddi4+0x2b6>
 8000df6:	eba1 0109 	sub.w	r1, r1, r9
 8000dfa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dfe:	fb09 f804 	mul.w	r8, r9, r4
 8000e02:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e06:	b292      	uxth	r2, r2
 8000e08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e0c:	4542      	cmp	r2, r8
 8000e0e:	d229      	bcs.n	8000e64 <__udivmoddi4+0x2e4>
 8000e10:	18ba      	adds	r2, r7, r2
 8000e12:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e16:	d2c4      	bcs.n	8000da2 <__udivmoddi4+0x222>
 8000e18:	4542      	cmp	r2, r8
 8000e1a:	d2c2      	bcs.n	8000da2 <__udivmoddi4+0x222>
 8000e1c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e20:	443a      	add	r2, r7
 8000e22:	e7be      	b.n	8000da2 <__udivmoddi4+0x222>
 8000e24:	45f0      	cmp	r8, lr
 8000e26:	d29d      	bcs.n	8000d64 <__udivmoddi4+0x1e4>
 8000e28:	ebbe 0302 	subs.w	r3, lr, r2
 8000e2c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e30:	3801      	subs	r0, #1
 8000e32:	46e1      	mov	r9, ip
 8000e34:	e796      	b.n	8000d64 <__udivmoddi4+0x1e4>
 8000e36:	eba7 0909 	sub.w	r9, r7, r9
 8000e3a:	4449      	add	r1, r9
 8000e3c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e40:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e44:	fb09 f804 	mul.w	r8, r9, r4
 8000e48:	e7db      	b.n	8000e02 <__udivmoddi4+0x282>
 8000e4a:	4673      	mov	r3, lr
 8000e4c:	e77f      	b.n	8000d4e <__udivmoddi4+0x1ce>
 8000e4e:	4650      	mov	r0, sl
 8000e50:	e766      	b.n	8000d20 <__udivmoddi4+0x1a0>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e6fd      	b.n	8000c52 <__udivmoddi4+0xd2>
 8000e56:	443b      	add	r3, r7
 8000e58:	3a02      	subs	r2, #2
 8000e5a:	e733      	b.n	8000cc4 <__udivmoddi4+0x144>
 8000e5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e60:	443b      	add	r3, r7
 8000e62:	e71c      	b.n	8000c9e <__udivmoddi4+0x11e>
 8000e64:	4649      	mov	r1, r9
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x222>
 8000e68:	eba1 0109 	sub.w	r1, r1, r9
 8000e6c:	46c4      	mov	ip, r8
 8000e6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e72:	fb09 f804 	mul.w	r8, r9, r4
 8000e76:	e7c4      	b.n	8000e02 <__udivmoddi4+0x282>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <my_timer_callback>:
extern ADC_HandleTypeDef hadc1;
extern uint8_t sampling ;

static uint8_t adc_running = 0;

void my_timer_callback(){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	// ADC Start
	HAL_ADC_Start(&hadc1);
 8000e80:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <my_timer_callback+0x14>)
 8000e82:	f000 fd33 	bl	80018ec <HAL_ADC_Start>
	adc_running = 1;
 8000e86:	4b03      	ldr	r3, [pc, #12]	@ (8000e94 <my_timer_callback+0x18>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000080 	.word	0x20000080
 8000e94:	2000007c 	.word	0x2000007c

08000e98 <main>:

int main(void){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
  Hw_Init(); //Llama a HAL_Init() y el resto de funciones para inicializar el hardware
 8000e9e:	f000 f901 	bl	80010a4 <Hw_Init>
  uint32_t counts = 100;
 8000ea2:	2364      	movs	r3, #100	@ 0x64
 8000ea4:	60fb      	str	r3, [r7, #12]
  float voltage = 0, temperature = 25;
 8000ea6:	f04f 0300 	mov.w	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	4b78      	ldr	r3, [pc, #480]	@ (8001090 <main+0x1f8>)
 8000eae:	607b      	str	r3, [r7, #4]
  //sampling = ADC_Sampling_Period;

  setTimerCallback(my_timer_callback);
 8000eb0:	4878      	ldr	r0, [pc, #480]	@ (8001094 <main+0x1fc>)
 8000eb2:	f000 facf 	bl	8001454 <setTimerCallback>

  Hw_Start();
 8000eb6:	f000 f905 	bl	80010c4 <Hw_Start>

  while (1){
	  if (adc_running==1){
 8000eba:	4b77      	ldr	r3, [pc, #476]	@ (8001098 <main+0x200>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d1fb      	bne.n	8000eba <main+0x22>
	  //if (sampling == 0){
		  // Poll for 100us
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8000ec2:	2164      	movs	r1, #100	@ 0x64
 8000ec4:	4875      	ldr	r0, [pc, #468]	@ (800109c <main+0x204>)
 8000ec6:	f000 fdf8 	bl	8001aba <HAL_ADC_PollForConversion>
		  // Read Value
		  counts = HAL_ADC_GetValue(&hadc1);
 8000eca:	4874      	ldr	r0, [pc, #464]	@ (800109c <main+0x204>)
 8000ecc:	f000 fe80 	bl	8001bd0 <HAL_ADC_GetValue>
 8000ed0:	60f8      	str	r0, [r7, #12]
		  // ADC Stop
		  HAL_ADC_Stop(&hadc1);
 8000ed2:	4872      	ldr	r0, [pc, #456]	@ (800109c <main+0x204>)
 8000ed4:	f000 fdbe 	bl	8001a54 <HAL_ADC_Stop>
		  adc_running = 0;
 8000ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8001098 <main+0x200>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	701a      	strb	r2, [r3, #0]
		  // Voltage
		  voltage = counts * ADC_RES;
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	f7ff fabc 	bl	800045c <__aeabi_ui2d>
 8000ee4:	a368      	add	r3, pc, #416	@ (adr r3, 8001088 <main+0x1f0>)
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	f7ff fb31 	bl	8000550 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fddb 	bl	8000ab0 <__aeabi_d2f>
 8000efa:	4603      	mov	r3, r0
 8000efc:	60bb      	str	r3, [r7, #8]

		  temperature = calcTemp(voltage);
 8000efe:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f02:	f000 faed 	bl	80014e0 <calcTemp>
 8000f06:	ed87 0a01 	vstr	s0, [r7, #4]
		  if(temperature < TEMP_A){
 8000f0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f0e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000f12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1a:	d516      	bpl.n	8000f4a <main+0xb2>
			  HAL_GPIO_WritePin(LED_PORT, LED_A_PIN, LED_OFF);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2180      	movs	r1, #128	@ 0x80
 8000f20:	485f      	ldr	r0, [pc, #380]	@ (80010a0 <main+0x208>)
 8000f22:	f001 fb17 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_B_PIN, LED_OFF);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f2c:	485c      	ldr	r0, [pc, #368]	@ (80010a0 <main+0x208>)
 8000f2e:	f001 fb11 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_C_PIN, LED_OFF);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f38:	4859      	ldr	r0, [pc, #356]	@ (80010a0 <main+0x208>)
 8000f3a:	f001 fb0b 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_D_PIN, LED_OFF);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f44:	4856      	ldr	r0, [pc, #344]	@ (80010a0 <main+0x208>)
 8000f46:	f001 fb05 	bl	8002554 <HAL_GPIO_WritePin>
		  }
		  if((temperature >= TEMP_A) && temperature < TEMP_B){
 8000f4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f4e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5a:	db1f      	blt.n	8000f9c <main+0x104>
 8000f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f60:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8000f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6c:	d516      	bpl.n	8000f9c <main+0x104>
			  HAL_GPIO_WritePin(LED_PORT, LED_A_PIN, LED_ON);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2180      	movs	r1, #128	@ 0x80
 8000f72:	484b      	ldr	r0, [pc, #300]	@ (80010a0 <main+0x208>)
 8000f74:	f001 faee 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_B_PIN, LED_OFF);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f7e:	4848      	ldr	r0, [pc, #288]	@ (80010a0 <main+0x208>)
 8000f80:	f001 fae8 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_C_PIN, LED_OFF);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f8a:	4845      	ldr	r0, [pc, #276]	@ (80010a0 <main+0x208>)
 8000f8c:	f001 fae2 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_D_PIN, LED_OFF);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f96:	4842      	ldr	r0, [pc, #264]	@ (80010a0 <main+0x208>)
 8000f98:	f001 fadc 	bl	8002554 <HAL_GPIO_WritePin>
		  }
		  if((temperature >= TEMP_B) && (temperature < TEMP_C)){
 8000f9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa0:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8000fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fac:	db1f      	blt.n	8000fee <main+0x156>
 8000fae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb2:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fbe:	d516      	bpl.n	8000fee <main+0x156>
			  HAL_GPIO_WritePin(LED_PORT, LED_A_PIN, LED_ON);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2180      	movs	r1, #128	@ 0x80
 8000fc4:	4836      	ldr	r0, [pc, #216]	@ (80010a0 <main+0x208>)
 8000fc6:	f001 fac5 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_B_PIN, LED_ON);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd0:	4833      	ldr	r0, [pc, #204]	@ (80010a0 <main+0x208>)
 8000fd2:	f001 fabf 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_C_PIN, LED_OFF);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fdc:	4830      	ldr	r0, [pc, #192]	@ (80010a0 <main+0x208>)
 8000fde:	f001 fab9 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_D_PIN, LED_OFF);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fe8:	482d      	ldr	r0, [pc, #180]	@ (80010a0 <main+0x208>)
 8000fea:	f001 fab3 	bl	8002554 <HAL_GPIO_WritePin>
		  }
		  if((temperature >= TEMP_C) && (temperature < TEMP_D)){
 8000fee:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff2:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffe:	db1f      	blt.n	8001040 <main+0x1a8>
 8001000:	edd7 7a01 	vldr	s15, [r7, #4]
 8001004:	eeb3 7a0c 	vmov.f32	s14, #60	@ 0x41e00000  28.0
 8001008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	d516      	bpl.n	8001040 <main+0x1a8>
			  HAL_GPIO_WritePin(LED_PORT, LED_A_PIN, LED_ON);
 8001012:	2201      	movs	r2, #1
 8001014:	2180      	movs	r1, #128	@ 0x80
 8001016:	4822      	ldr	r0, [pc, #136]	@ (80010a0 <main+0x208>)
 8001018:	f001 fa9c 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_B_PIN, LED_ON);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001022:	481f      	ldr	r0, [pc, #124]	@ (80010a0 <main+0x208>)
 8001024:	f001 fa96 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_C_PIN, LED_ON);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800102e:	481c      	ldr	r0, [pc, #112]	@ (80010a0 <main+0x208>)
 8001030:	f001 fa90 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_D_PIN, LED_OFF);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800103a:	4819      	ldr	r0, [pc, #100]	@ (80010a0 <main+0x208>)
 800103c:	f001 fa8a 	bl	8002554 <HAL_GPIO_WritePin>
		  }
		  if(temperature >= TEMP_D){
 8001040:	edd7 7a01 	vldr	s15, [r7, #4]
 8001044:	eeb3 7a0c 	vmov.f32	s14, #60	@ 0x41e00000  28.0
 8001048:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	db16      	blt.n	8001080 <main+0x1e8>
			  HAL_GPIO_WritePin(LED_PORT, LED_A_PIN, LED_ON);
 8001052:	2201      	movs	r2, #1
 8001054:	2180      	movs	r1, #128	@ 0x80
 8001056:	4812      	ldr	r0, [pc, #72]	@ (80010a0 <main+0x208>)
 8001058:	f001 fa7c 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_B_PIN, LED_ON);
 800105c:	2201      	movs	r2, #1
 800105e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001062:	480f      	ldr	r0, [pc, #60]	@ (80010a0 <main+0x208>)
 8001064:	f001 fa76 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_C_PIN, LED_ON);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800106e:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <main+0x208>)
 8001070:	f001 fa70 	bl	8002554 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_PORT, LED_D_PIN, LED_ON);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800107a:	4809      	ldr	r0, [pc, #36]	@ (80010a0 <main+0x208>)
 800107c:	f001 fa6a 	bl	8002554 <HAL_GPIO_WritePin>
	  if (adc_running==1){
 8001080:	e71b      	b.n	8000eba <main+0x22>
 8001082:	bf00      	nop
 8001084:	f3af 8000 	nop.w
 8001088:	66666666 	.word	0x66666666
 800108c:	3f4a6666 	.word	0x3f4a6666
 8001090:	41c80000 	.word	0x41c80000
 8001094:	08000e7d 	.word	0x08000e7d
 8001098:	2000007c 	.word	0x2000007c
 800109c:	20000080 	.word	0x20000080
 80010a0:	40020000 	.word	0x40020000

080010a4 <Hw_Init>:


static void (*timer_callback)();

//DEFINICIÓN DE FUNCIONES GLOBALES (PÚBLICAS)
uint8_t Hw_Init(void){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	HAL_Init();
 80010a8:	f000 fb6a 	bl	8001780 <HAL_Init>
	SystemClock_Config(); //CONFIGURACIÓN DEL CLOCK
 80010ac:	f000 f814 	bl	80010d8 <SystemClock_Config>
	MX_ADC1_Init(); //CONFIGURACIÓN DEL ADC
 80010b0:	f000 f872 	bl	8001198 <MX_ADC1_Init>
	MX_TIM2_Init(); //CONFIGURACIÓN DEL TIMER
 80010b4:	f000 f8b8 	bl	8001228 <MX_TIM2_Init>
	MX_GPIO_Init(); //CONFIGURACIÓ GPIO
 80010b8:	f000 f902 	bl	80012c0 <MX_GPIO_Init>
	return 1;
 80010bc:	2301      	movs	r3, #1
}
 80010be:	4618      	mov	r0, r3
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <Hw_Start>:

void Hw_Start(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <Hw_Start+0x10>)
 80010ca:	f001 fed1 	bl	8002e70 <HAL_TIM_Base_Start_IT>
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200000c8 	.word	0x200000c8

080010d8 <SystemClock_Config>:

//Configuración del CLOCK
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b094      	sub	sp, #80	@ 0x50
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	2230      	movs	r2, #48	@ 0x30
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fab6 	bl	8003658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <SystemClock_Config+0xb8>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	4a22      	ldr	r2, [pc, #136]	@ (8001190 <SystemClock_Config+0xb8>)
 8001106:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110a:	6413      	str	r3, [r2, #64]	@ 0x40
 800110c:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <SystemClock_Config+0xb8>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <SystemClock_Config+0xbc>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001124:	4a1b      	ldr	r2, [pc, #108]	@ (8001194 <SystemClock_Config+0xbc>)
 8001126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <SystemClock_Config+0xbc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001138:	2302      	movs	r3, #2
 800113a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	2301      	movs	r3, #1
 800113e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001140:	2310      	movs	r3, #16
 8001142:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4618      	mov	r0, r3
 800114e:	f001 fa1b 	bl	8002588 <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001158:	f000 f9ba 	bl	80014d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fc7e 	bl	8002a78 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001182:	f000 f9a5 	bl	80014d0 <Error_Handler>
  }
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	@ 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_ADC1_Init>:

//CONFIGURACIÓN DEL ADC
void MX_ADC1_Init(void){
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
  hadc1.Instance = ADC1;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <MX_ADC1_Init+0x84>)
 80011ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <MX_ADC1_Init+0x88>)
 80011ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <MX_ADC1_Init+0x84>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <MX_ADC1_Init+0x84>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011bc:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_ADC1_Init+0x84>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011c2:	4b16      	ldr	r3, [pc, #88]	@ (800121c <MX_ADC1_Init+0x84>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c8:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_ADC1_Init+0x84>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_ADC1_Init+0x84>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_ADC1_Init+0x84>)
 80011d8:	4a12      	ldr	r2, [pc, #72]	@ (8001224 <MX_ADC1_Init+0x8c>)
 80011da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_ADC1_Init+0x84>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <MX_ADC1_Init+0x84>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_ADC1_Init+0x84>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_ADC1_Init+0x84>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	615a      	str	r2, [r3, #20]
  HAL_ADC_Init(&hadc1);
 80011f6:	4809      	ldr	r0, [pc, #36]	@ (800121c <MX_ADC1_Init+0x84>)
 80011f8:	f000 fb34 	bl	8001864 <HAL_ADC_Init>
  /*if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }*/

  sConfig.Channel = ADC_CHANNEL_0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001200:	2301      	movs	r3, #1
 8001202:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <MX_ADC1_Init+0x84>)
 800120e:	f000 fced 	bl	8001bec <HAL_ADC_ConfigChannel>
  /*if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }*/
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000080 	.word	0x20000080
 8001220:	40012000 	.word	0x40012000
 8001224:	0f000001 	.word	0x0f000001

08001228 <MX_TIM2_Init>:

void MX_TIM2_Init(void){
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	463b      	mov	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]

	htim2.Instance = TIM2;
 8001244:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <MX_TIM2_Init+0x94>)
 8001246:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800124a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = TIM_PRESCALER - 1;
 800124c:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <MX_TIM2_Init+0x94>)
 800124e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001252:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <MX_TIM2_Init+0x94>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = (uint32_t) _CalcPeriod(frec);
 800125a:	4b18      	ldr	r3, [pc, #96]	@ (80012bc <MX_TIM2_Init+0x94>)
 800125c:	220f      	movs	r2, #15
 800125e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001260:	4b16      	ldr	r3, [pc, #88]	@ (80012bc <MX_TIM2_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	4b15      	ldr	r3, [pc, #84]	@ (80012bc <MX_TIM2_Init+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800126c:	4813      	ldr	r0, [pc, #76]	@ (80012bc <MX_TIM2_Init+0x94>)
 800126e:	f001 fdaf 	bl	8002dd0 <HAL_TIM_Base_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM2_Init+0x54>
	{
	Error_Handler();
 8001278:	f000 f92a 	bl	80014d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001280:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4619      	mov	r1, r3
 8001288:	480c      	ldr	r0, [pc, #48]	@ (80012bc <MX_TIM2_Init+0x94>)
 800128a:	f001 ff43 	bl	8003114 <HAL_TIM_ConfigClockSource>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM2_Init+0x70>
	{
	Error_Handler();
 8001294:	f000 f91c 	bl	80014d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a0:	463b      	mov	r3, r7
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_TIM2_Init+0x94>)
 80012a6:	f002 f955 	bl	8003554 <HAL_TIMEx_MasterConfigSynchronization>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0x8c>
	{
	Error_Handler();
 80012b0:	f000 f90e 	bl	80014d0 <Error_Handler>
	}
}
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200000c8 	.word	0x200000c8

080012c0 <MX_GPIO_Init>:

//CONFIGURACIÓN GPIO
void MX_GPIO_Init(void){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b09e      	sub	sp, #120	@ 0x78
 80012c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LEDA_Conf = {0};
 80012c6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef LEDB_Conf = {0};
 80012d6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef LEDC_Conf = {0};
 80012e6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef LEDD_Conf = {0};
 80012f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
	GPIO_InitTypeDef ADC_Pin_Conf = {0};
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b4c      	ldr	r3, [pc, #304]	@ (800144c <MX_GPIO_Init+0x18c>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a4b      	ldr	r2, [pc, #300]	@ (800144c <MX_GPIO_Init+0x18c>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b49      	ldr	r3, [pc, #292]	@ (800144c <MX_GPIO_Init+0x18c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b45      	ldr	r3, [pc, #276]	@ (800144c <MX_GPIO_Init+0x18c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	4a44      	ldr	r2, [pc, #272]	@ (800144c <MX_GPIO_Init+0x18c>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001340:	6313      	str	r3, [r2, #48]	@ 0x30
 8001342:	4b42      	ldr	r3, [pc, #264]	@ (800144c <MX_GPIO_Init+0x18c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b3e      	ldr	r3, [pc, #248]	@ (800144c <MX_GPIO_Init+0x18c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a3d      	ldr	r2, [pc, #244]	@ (800144c <MX_GPIO_Init+0x18c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b3b      	ldr	r3, [pc, #236]	@ (800144c <MX_GPIO_Init+0x18c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_A_PIN, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2180      	movs	r1, #128	@ 0x80
 800136e:	4838      	ldr	r0, [pc, #224]	@ (8001450 <MX_GPIO_Init+0x190>)
 8001370:	f001 f8f0 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_B_PIN, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800137a:	4835      	ldr	r0, [pc, #212]	@ (8001450 <MX_GPIO_Init+0x190>)
 800137c:	f001 f8ea 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_C_PIN, GPIO_PIN_RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001386:	4832      	ldr	r0, [pc, #200]	@ (8001450 <MX_GPIO_Init+0x190>)
 8001388:	f001 f8e4 	bl	8002554 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_D_PIN, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001392:	482f      	ldr	r0, [pc, #188]	@ (8001450 <MX_GPIO_Init+0x190>)
 8001394:	f001 f8de 	bl	8002554 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA10 */
	LEDA_Conf.Pin = LED_A_PIN;
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	667b      	str	r3, [r7, #100]	@ 0x64
	LEDA_Conf.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	66bb      	str	r3, [r7, #104]	@ 0x68
	LEDA_Conf.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
	LEDA_Conf.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	673b      	str	r3, [r7, #112]	@ 0x70

	LEDB_Conf.Pin = LED_B_PIN;
 80013a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013ac:	653b      	str	r3, [r7, #80]	@ 0x50
	LEDB_Conf.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	657b      	str	r3, [r7, #84]	@ 0x54
	LEDB_Conf.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	65bb      	str	r3, [r7, #88]	@ 0x58
	LEDB_Conf.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	65fb      	str	r3, [r7, #92]	@ 0x5c

	LEDC_Conf.Pin = LED_C_PIN;
 80013ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LEDC_Conf.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	643b      	str	r3, [r7, #64]	@ 0x40
	LEDC_Conf.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	647b      	str	r3, [r7, #68]	@ 0x44
	LEDC_Conf.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	64bb      	str	r3, [r7, #72]	@ 0x48

	LEDD_Conf.Pin = LED_D_PIN;
 80013cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	LEDD_Conf.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	LEDD_Conf.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	633b      	str	r3, [r7, #48]	@ 0x30
	LEDD_Conf.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	637b      	str	r3, [r7, #52]	@ 0x34

	HAL_GPIO_Init(GPIOA, &LEDA_Conf);
 80013de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013e2:	4619      	mov	r1, r3
 80013e4:	481a      	ldr	r0, [pc, #104]	@ (8001450 <MX_GPIO_Init+0x190>)
 80013e6:	f000 ff31 	bl	800224c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &LEDB_Conf);
 80013ea:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80013ee:	4619      	mov	r1, r3
 80013f0:	4817      	ldr	r0, [pc, #92]	@ (8001450 <MX_GPIO_Init+0x190>)
 80013f2:	f000 ff2b 	bl	800224c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &LEDC_Conf);
 80013f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80013fa:	4619      	mov	r1, r3
 80013fc:	4814      	ldr	r0, [pc, #80]	@ (8001450 <MX_GPIO_Init+0x190>)
 80013fe:	f000 ff25 	bl	800224c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &LEDD_Conf);
 8001402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001406:	4619      	mov	r1, r3
 8001408:	4811      	ldr	r0, [pc, #68]	@ (8001450 <MX_GPIO_Init+0x190>)
 800140a:	f000 ff1f 	bl	800224c <HAL_GPIO_Init>

	/* ADC Pin Hardware Configuration */
	__HAL_RCC_ADC1_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <MX_GPIO_Init+0x18c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001416:	4a0d      	ldr	r2, [pc, #52]	@ (800144c <MX_GPIO_Init+0x18c>)
 8001418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800141c:	6453      	str	r3, [r2, #68]	@ 0x44
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <MX_GPIO_Init+0x18c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
	ADC_Pin_Conf.Pin = GPIO_PIN_0;
 800142a:	2301      	movs	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
	ADC_Pin_Conf.Mode = GPIO_MODE_ANALOG;
 800142e:	2303      	movs	r3, #3
 8001430:	61bb      	str	r3, [r7, #24]
	ADC_Pin_Conf.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &ADC_Pin_Conf);
 8001436:	f107 0314 	add.w	r3, r7, #20
 800143a:	4619      	mov	r1, r3
 800143c:	4804      	ldr	r0, [pc, #16]	@ (8001450 <MX_GPIO_Init+0x190>)
 800143e:	f000 ff05 	bl	800224c <HAL_GPIO_Init>
}
 8001442:	bf00      	nop
 8001444:	3778      	adds	r7, #120	@ 0x78
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000

08001454 <setTimerCallback>:

void setTimerCallback(void (*callback_fn)()){
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	timer_callback = callback_fn;
 800145c:	4a04      	ldr	r2, [pc, #16]	@ (8001470 <setTimerCallback+0x1c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000114 	.word	0x20000114

08001474 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){ //TIM2 IRQ definition
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	/* if(sampling > 0) sampling--;
	else sampling = ADC_Sampling_Period;*/

	HAL_TIM_IRQHandler(&htim2);
 8001478:	4811      	ldr	r0, [pc, #68]	@ (80014c0 <TIM2_IRQHandler+0x4c>)
 800147a:	f001 fd5b 	bl	8002f34 <HAL_TIM_IRQHandler>


  read = (counter == (COUNT_MUESTREO - 1))? _YES : _NO;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <TIM2_IRQHandler+0x50>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b01      	cmp	r3, #1
 8001484:	bf14      	ite	ne
 8001486:	2301      	movne	r3, #1
 8001488:	2300      	moveq	r3, #0
 800148a:	b2db      	uxtb	r3, r3
 800148c:	461a      	mov	r2, r3
 800148e:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <TIM2_IRQHandler+0x54>)
 8001490:	701a      	strb	r2, [r3, #0]
  if(counter < (COUNT_MUESTREO -1) ){
 8001492:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <TIM2_IRQHandler+0x50>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d106      	bne.n	80014a8 <TIM2_IRQHandler+0x34>
	  counter++;
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <TIM2_IRQHandler+0x50>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <TIM2_IRQHandler+0x50>)
 80014a4:	701a      	strb	r2, [r3, #0]
	  counter = 0;
	  if(timer_callback){
		  timer_callback();	// Ejecutar la funcion de callback
	  }
  }
}
 80014a6:	e009      	b.n	80014bc <TIM2_IRQHandler+0x48>
	  counter = 0;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <TIM2_IRQHandler+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
	  if(timer_callback){
 80014ae:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <TIM2_IRQHandler+0x58>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <TIM2_IRQHandler+0x48>
		  timer_callback();	// Ejecutar la funcion de callback
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <TIM2_IRQHandler+0x58>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4798      	blx	r3
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200000c8 	.word	0x200000c8
 80014c4:	20000110 	.word	0x20000110
 80014c8:	20000000 	.word	0x20000000
 80014cc:	20000114 	.word	0x20000114

080014d0 <Error_Handler>:



//ERROR HANDLER
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <Error_Handler+0x8>
 80014dc:	0000      	movs	r0, r0
	...

080014e0 <calcTemp>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

float calcTemp(float voltage){
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	ed87 0a01 	vstr	s0, [r7, #4]
	float temp, res;
	res = (voltage*R1) / (TENSION - voltage);
 80014ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ee:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001578 <calcTemp+0x98>
 80014f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f6:	ee17 0a90 	vmov	r0, s15
 80014fa:	f7fe ffd1 	bl	80004a0 <__aeabi_f2d>
 80014fe:	4604      	mov	r4, r0
 8001500:	460d      	mov	r5, r1
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7fe ffcc 	bl	80004a0 <__aeabi_f2d>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	a118      	add	r1, pc, #96	@ (adr r1, 8001570 <calcTemp+0x90>)
 800150e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001512:	f7fe fe65 	bl	80001e0 <__aeabi_dsub>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4620      	mov	r0, r4
 800151c:	4629      	mov	r1, r5
 800151e:	f7ff f941 	bl	80007a4 <__aeabi_ddiv>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4610      	mov	r0, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f7ff fac1 	bl	8000ab0 <__aeabi_d2f>
 800152e:	4603      	mov	r3, r0
 8001530:	60fb      	str	r3, [r7, #12]
	temp = BETA / (log(res/R0) + BETA/T0);
 8001532:	edd7 7a03 	vldr	s15, [r7, #12]
 8001536:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001578 <calcTemp+0x98>
 800153a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800153e:	ee16 0a90 	vmov	r0, s13
 8001542:	f7fe ffad 	bl	80004a0 <__aeabi_f2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	ec43 2b10 	vmov	d0, r2, r3
 800154e:	f002 f8b7 	bl	80036c0 <log>
 8001552:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <calcTemp+0x9c>)
 8001554:	60bb      	str	r3, [r7, #8]
	return _Celsius(temp);
 8001556:	edd7 7a02 	vldr	s15, [r7, #8]
 800155a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001580 <calcTemp+0xa0>
 800155e:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001562:	eeb0 0a67 	vmov.f32	s0, s15
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bdb0      	pop	{r4, r5, r7, pc}
 800156c:	f3af 8000 	nop.w
 8001570:	66666666 	.word	0x66666666
 8001574:	400a6666 	.word	0x400a6666
 8001578:	461c4000 	.word	0x461c4000
 800157c:	44458000 	.word	0x44458000
 8001580:	43888000 	.word	0x43888000

08001584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <HAL_MspInit+0x4c>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	4a0f      	ldr	r2, [pc, #60]	@ (80015d0 <HAL_MspInit+0x4c>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001598:	6453      	str	r3, [r2, #68]	@ 0x44
 800159a:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <HAL_MspInit+0x4c>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_MspInit+0x4c>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_MspInit+0x4c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015b6:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <HAL_MspInit+0x4c>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <HAL_ADC_MspInit+0x7c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d127      	bne.n	8001646 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <HAL_ADC_MspInit+0x80>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	4a15      	ldr	r2, [pc, #84]	@ (8001654 <HAL_ADC_MspInit+0x80>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <HAL_ADC_MspInit+0x80>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <HAL_ADC_MspInit+0x80>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	4a0e      	ldr	r2, [pc, #56]	@ (8001654 <HAL_ADC_MspInit+0x80>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6313      	str	r3, [r2, #48]	@ 0x30
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <HAL_ADC_MspInit+0x80>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800162e:	2301      	movs	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	2303      	movs	r3, #3
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <HAL_ADC_MspInit+0x84>)
 8001642:	f000 fe03 	bl	800224c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	@ 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40012000 	.word	0x40012000
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000

0800165c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800166c:	d115      	bne.n	800169a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_TIM_Base_MspInit+0x48>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <HAL_TIM_Base_MspInit+0x48>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <HAL_TIM_Base_MspInit+0x48>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	201c      	movs	r0, #28
 8001690:	f000 fda5 	bl	80021de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001694:	201c      	movs	r0, #28
 8001696:	f000 fdbe 	bl	8002216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <NMI_Handler+0x4>

080016b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <MemManage_Handler+0x4>

080016c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <UsageFault_Handler+0x4>

080016d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fe:	f000 f891 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <SystemInit+0x20>)
 800170e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001712:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <SystemInit+0x20>)
 8001714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800172c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001764 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001730:	f7ff ffea 	bl	8001708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001734:	480c      	ldr	r0, [pc, #48]	@ (8001768 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001736:	490d      	ldr	r1, [pc, #52]	@ (800176c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001738:	4a0d      	ldr	r2, [pc, #52]	@ (8001770 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800174c:	4c0a      	ldr	r4, [pc, #40]	@ (8001778 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800175a:	f001 ff8b 	bl	8003674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175e:	f7ff fb9b 	bl	8000e98 <main>
  bx  lr    
 8001762:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001764:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800176c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001770:	08003af8 	.word	0x08003af8
  ldr r2, =_sbss
 8001774:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001778:	20000254 	.word	0x20000254

0800177c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800177c:	e7fe      	b.n	800177c <ADC_IRQHandler>
	...

08001780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001784:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0d      	ldr	r2, [pc, #52]	@ (80017c0 <HAL_Init+0x40>)
 800178a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800178e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001790:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <HAL_Init+0x40>)
 8001796:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800179a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	@ (80017c0 <HAL_Init+0x40>)
 80017a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 fd0d 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	200f      	movs	r0, #15
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fee6 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40023c00 	.word	0x40023c00

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fd25 	bl	8002232 <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 fced 	bl	80021de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	@ (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000004 	.word	0x20000004
 800181c:	2000000c 	.word	0x2000000c
 8001820:	20000008 	.word	0x20000008

08001824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	@ (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	2000000c 	.word	0x2000000c
 8001848:	20000118 	.word	0x20000118

0800184c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000118 	.word	0x20000118

08001864 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e033      	b.n	80018e2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	2b00      	cmp	r3, #0
 8001880:	d109      	bne.n	8001896 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fea6 	bl	80015d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d118      	bne.n	80018d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018aa:	f023 0302 	bic.w	r3, r3, #2
 80018ae:	f043 0202 	orr.w	r2, r3, #2
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 faba 	bl	8001e30 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c6:	f023 0303 	bic.w	r3, r3, #3
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80018d2:	e001      	b.n	80018d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_ADC_Start+0x1a>
 8001902:	2302      	movs	r3, #2
 8001904:	e097      	b.n	8001a36 <HAL_ADC_Start+0x14a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b01      	cmp	r3, #1
 800191a:	d018      	beq.n	800194e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689a      	ldr	r2, [r3, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800192c:	4b45      	ldr	r3, [pc, #276]	@ (8001a44 <HAL_ADC_Start+0x158>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a45      	ldr	r2, [pc, #276]	@ (8001a48 <HAL_ADC_Start+0x15c>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9a      	lsrs	r2, r3, #18
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001940:	e002      	b.n	8001948 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	3b01      	subs	r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f9      	bne.n	8001942 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b01      	cmp	r3, #1
 800195a:	d15f      	bne.n	8001a1c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001986:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800199a:	d106      	bne.n	80019aa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a0:	f023 0206 	bic.w	r2, r3, #6
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	645a      	str	r2, [r3, #68]	@ 0x44
 80019a8:	e002      	b.n	80019b0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b8:	4b24      	ldr	r3, [pc, #144]	@ (8001a4c <HAL_ADC_Start+0x160>)
 80019ba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019c4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 031f 	and.w	r3, r3, #31
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10f      	bne.n	80019f2 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d129      	bne.n	8001a34 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	e020      	b.n	8001a34 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a16      	ldr	r2, [pc, #88]	@ (8001a50 <HAL_ADC_Start+0x164>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d11b      	bne.n	8001a34 <HAL_ADC_Start+0x148>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d114      	bne.n	8001a34 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a18:	609a      	str	r2, [r3, #8]
 8001a1a:	e00b      	b.n	8001a34 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	f043 0210 	orr.w	r2, r3, #16
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000004 	.word	0x20000004
 8001a48:	431bde83 	.word	0x431bde83
 8001a4c:	40012300 	.word	0x40012300
 8001a50:	40012000 	.word	0x40012000

08001a54 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Stop+0x16>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e021      	b.n	8001aae <HAL_ADC_Stop+0x5a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a94:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	f043 0201 	orr.w	r2, r3, #1
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad6:	d113      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ae2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ae6:	d10b      	bne.n	8001b00 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f043 0220 	orr.w	r2, r3, #32
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e063      	b.n	8001bc8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b00:	f7ff fea4 	bl	800184c <HAL_GetTick>
 8001b04:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b06:	e021      	b.n	8001b4c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0e:	d01d      	beq.n	8001b4c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <HAL_ADC_PollForConversion+0x6c>
 8001b16:	f7ff fe99 	bl	800184c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d212      	bcs.n	8001b4c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d00b      	beq.n	8001b4c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b38:	f043 0204 	orr.w	r2, r3, #4
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e03d      	b.n	8001bc8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d1d6      	bne.n	8001b08 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f06f 0212 	mvn.w	r2, #18
 8001b62:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d123      	bne.n	8001bc6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d11f      	bne.n	8001bc6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d006      	beq.n	8001ba2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d111      	bne.n	8001bc6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d105      	bne.n	8001bc6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f043 0201 	orr.w	r2, r3, #1
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x1c>
 8001c04:	2302      	movs	r3, #2
 8001c06:	e105      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x228>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b09      	cmp	r3, #9
 8001c16:	d925      	bls.n	8001c64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68d9      	ldr	r1, [r3, #12]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3b1e      	subs	r3, #30
 8001c2e:	2207      	movs	r2, #7
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43da      	mvns	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	400a      	ands	r2, r1
 8001c3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	68d9      	ldr	r1, [r3, #12]
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4603      	mov	r3, r0
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4403      	add	r3, r0
 8001c56:	3b1e      	subs	r3, #30
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	e022      	b.n	8001caa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6919      	ldr	r1, [r3, #16]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	461a      	mov	r2, r3
 8001c72:	4613      	mov	r3, r2
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	4413      	add	r3, r2
 8001c78:	2207      	movs	r2, #7
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	400a      	ands	r2, r1
 8001c86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6919      	ldr	r1, [r3, #16]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4403      	add	r3, r0
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d824      	bhi.n	8001cfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	3b05      	subs	r3, #5
 8001cc4:	221f      	movs	r2, #31
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43da      	mvns	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	400a      	ands	r2, r1
 8001cd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	3b05      	subs	r3, #5
 8001cee:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cfa:	e04c      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b0c      	cmp	r3, #12
 8001d02:	d824      	bhi.n	8001d4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	3b23      	subs	r3, #35	@ 0x23
 8001d16:	221f      	movs	r2, #31
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	400a      	ands	r2, r1
 8001d24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3b23      	subs	r3, #35	@ 0x23
 8001d40:	fa00 f203 	lsl.w	r2, r0, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d4c:	e023      	b.n	8001d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b41      	subs	r3, #65	@ 0x41
 8001d60:	221f      	movs	r2, #31
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	3b41      	subs	r3, #65	@ 0x41
 8001d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d96:	4b22      	ldr	r3, [pc, #136]	@ (8001e20 <HAL_ADC_ConfigChannel+0x234>)
 8001d98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a21      	ldr	r2, [pc, #132]	@ (8001e24 <HAL_ADC_ConfigChannel+0x238>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d109      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x1cc>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b12      	cmp	r3, #18
 8001daa:	d105      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	@ (8001e24 <HAL_ADC_ConfigChannel+0x238>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d123      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x21e>
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b10      	cmp	r3, #16
 8001dc8:	d003      	beq.n	8001dd2 <HAL_ADC_ConfigChannel+0x1e6>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b11      	cmp	r3, #17
 8001dd0:	d11b      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b10      	cmp	r3, #16
 8001de4:	d111      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001de6:	4b10      	ldr	r3, [pc, #64]	@ (8001e28 <HAL_ADC_ConfigChannel+0x23c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a10      	ldr	r2, [pc, #64]	@ (8001e2c <HAL_ADC_ConfigChannel+0x240>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	0c9a      	lsrs	r2, r3, #18
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001dfc:	e002      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f9      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40012300 	.word	0x40012300
 8001e24:	40012000 	.word	0x40012000
 8001e28:	20000004 	.word	0x20000004
 8001e2c:	431bde83 	.word	0x431bde83

08001e30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e38:	4b79      	ldr	r3, [pc, #484]	@ (8002020 <ADC_Init+0x1f0>)
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	431a      	orrs	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	021a      	lsls	r2, r3, #8
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6899      	ldr	r1, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec2:	4a58      	ldr	r2, [pc, #352]	@ (8002024 <ADC_Init+0x1f4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d022      	beq.n	8001f0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ed6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6899      	ldr	r1, [r3, #8]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ef8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	e00f      	b.n	8001f2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0202 	bic.w	r2, r2, #2
 8001f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6899      	ldr	r1, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7e1b      	ldrb	r3, [r3, #24]
 8001f48:	005a      	lsls	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01b      	beq.n	8001f94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f6a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6859      	ldr	r1, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	3b01      	subs	r3, #1
 8001f88:	035a      	lsls	r2, r3, #13
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	e007      	b.n	8001fa4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fa2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	051a      	lsls	r2, r3, #20
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6899      	ldr	r1, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fe6:	025a      	lsls	r2, r3, #9
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ffe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6899      	ldr	r1, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	029a      	lsls	r2, r3, #10
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	609a      	str	r2, [r3, #8]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40012300 	.word	0x40012300
 8002024:	0f000001 	.word	0x0f000001

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	@ (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0b      	blt.n	80020b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4907      	ldr	r1, [pc, #28]	@ (80020c4 <__NVIC_EnableIRQ+0x38>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2001      	movs	r0, #1
 80020ae:	fa00 f202 	lsl.w	r2, r0, r2
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100

080020c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	6039      	str	r1, [r7, #0]
 80020d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	db0a      	blt.n	80020f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	490c      	ldr	r1, [pc, #48]	@ (8002114 <__NVIC_SetPriority+0x4c>)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	440b      	add	r3, r1
 80020ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f0:	e00a      	b.n	8002108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	4908      	ldr	r1, [pc, #32]	@ (8002118 <__NVIC_SetPriority+0x50>)
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	f003 030f 	and.w	r3, r3, #15
 80020fe:	3b04      	subs	r3, #4
 8002100:	0112      	lsls	r2, r2, #4
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	440b      	add	r3, r1
 8002106:	761a      	strb	r2, [r3, #24]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000e100 	.word	0xe000e100
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800211c:	b480      	push	{r7}
 800211e:	b089      	sub	sp, #36	@ 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f1c3 0307 	rsb	r3, r3, #7
 8002136:	2b04      	cmp	r3, #4
 8002138:	bf28      	it	cs
 800213a:	2304      	movcs	r3, #4
 800213c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	3304      	adds	r3, #4
 8002142:	2b06      	cmp	r3, #6
 8002144:	d902      	bls.n	800214c <NVIC_EncodePriority+0x30>
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3b03      	subs	r3, #3
 800214a:	e000      	b.n	800214e <NVIC_EncodePriority+0x32>
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43da      	mvns	r2, r3
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002164:	f04f 31ff 	mov.w	r1, #4294967295
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	43d9      	mvns	r1, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	4313      	orrs	r3, r2
         );
}
 8002176:	4618      	mov	r0, r3
 8002178:	3724      	adds	r7, #36	@ 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3b01      	subs	r3, #1
 8002190:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002194:	d301      	bcc.n	800219a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002196:	2301      	movs	r3, #1
 8002198:	e00f      	b.n	80021ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <SysTick_Config+0x40>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	3b01      	subs	r3, #1
 80021a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a2:	210f      	movs	r1, #15
 80021a4:	f04f 30ff 	mov.w	r0, #4294967295
 80021a8:	f7ff ff8e 	bl	80020c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ac:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <SysTick_Config+0x40>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b2:	4b04      	ldr	r3, [pc, #16]	@ (80021c4 <SysTick_Config+0x40>)
 80021b4:	2207      	movs	r2, #7
 80021b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff ff29 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f0:	f7ff ff3e 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68b9      	ldr	r1, [r7, #8]
 80021fa:	6978      	ldr	r0, [r7, #20]
 80021fc:	f7ff ff8e 	bl	800211c <NVIC_EncodePriority>
 8002200:	4602      	mov	r2, r0
 8002202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff5d 	bl	80020c8 <__NVIC_SetPriority>
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff31 	bl	800208c <__NVIC_EnableIRQ>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff ffa2 	bl	8002184 <SysTick_Config>
 8002240:	4603      	mov	r3, r0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	@ 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	e159      	b.n	800251c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	f040 8148 	bne.w	8002516 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d005      	beq.n	800229e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	2b02      	cmp	r3, #2
 800229c:	d130      	bne.n	8002300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	2203      	movs	r2, #3
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 0201 	and.w	r2, r3, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b03      	cmp	r3, #3
 800230a:	d017      	beq.n	800233c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d123      	bne.n	8002390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	08da      	lsrs	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3208      	adds	r2, #8
 8002350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	220f      	movs	r2, #15
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	08da      	lsrs	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3208      	adds	r2, #8
 800238a:	69b9      	ldr	r1, [r7, #24]
 800238c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0203 	and.w	r2, r3, #3
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a2 	beq.w	8002516 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b57      	ldr	r3, [pc, #348]	@ (8002534 <HAL_GPIO_Init+0x2e8>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023da:	4a56      	ldr	r2, [pc, #344]	@ (8002534 <HAL_GPIO_Init+0x2e8>)
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023e2:	4b54      	ldr	r3, [pc, #336]	@ (8002534 <HAL_GPIO_Init+0x2e8>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ee:	4a52      	ldr	r2, [pc, #328]	@ (8002538 <HAL_GPIO_Init+0x2ec>)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	220f      	movs	r2, #15
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a49      	ldr	r2, [pc, #292]	@ (800253c <HAL_GPIO_Init+0x2f0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d019      	beq.n	800244e <HAL_GPIO_Init+0x202>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a48      	ldr	r2, [pc, #288]	@ (8002540 <HAL_GPIO_Init+0x2f4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_GPIO_Init+0x1fe>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a47      	ldr	r2, [pc, #284]	@ (8002544 <HAL_GPIO_Init+0x2f8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00d      	beq.n	8002446 <HAL_GPIO_Init+0x1fa>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a46      	ldr	r2, [pc, #280]	@ (8002548 <HAL_GPIO_Init+0x2fc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d007      	beq.n	8002442 <HAL_GPIO_Init+0x1f6>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a45      	ldr	r2, [pc, #276]	@ (800254c <HAL_GPIO_Init+0x300>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_GPIO_Init+0x1f2>
 800243a:	2304      	movs	r3, #4
 800243c:	e008      	b.n	8002450 <HAL_GPIO_Init+0x204>
 800243e:	2307      	movs	r3, #7
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x204>
 8002442:	2303      	movs	r3, #3
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x204>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x204>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x204>
 800244e:	2300      	movs	r3, #0
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f002 0203 	and.w	r2, r2, #3
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002460:	4935      	ldr	r1, [pc, #212]	@ (8002538 <HAL_GPIO_Init+0x2ec>)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b38      	ldr	r3, [pc, #224]	@ (8002550 <HAL_GPIO_Init+0x304>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002492:	4a2f      	ldr	r2, [pc, #188]	@ (8002550 <HAL_GPIO_Init+0x304>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002498:	4b2d      	ldr	r3, [pc, #180]	@ (8002550 <HAL_GPIO_Init+0x304>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024bc:	4a24      	ldr	r2, [pc, #144]	@ (8002550 <HAL_GPIO_Init+0x304>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c2:	4b23      	ldr	r3, [pc, #140]	@ (8002550 <HAL_GPIO_Init+0x304>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002550 <HAL_GPIO_Init+0x304>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ec:	4b18      	ldr	r3, [pc, #96]	@ (8002550 <HAL_GPIO_Init+0x304>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002510:	4a0f      	ldr	r2, [pc, #60]	@ (8002550 <HAL_GPIO_Init+0x304>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b0f      	cmp	r3, #15
 8002520:	f67f aea2 	bls.w	8002268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3724      	adds	r7, #36	@ 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40013800 	.word	0x40013800
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40013c00 	.word	0x40013c00

08002554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
 8002560:	4613      	mov	r3, r2
 8002562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002564:	787b      	ldrb	r3, [r7, #1]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002570:	e003      	b.n	800257a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002572:	887b      	ldrh	r3, [r7, #2]
 8002574:	041a      	lsls	r2, r3, #16
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	619a      	str	r2, [r3, #24]
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e267      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d075      	beq.n	8002692 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025a6:	4b88      	ldr	r3, [pc, #544]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d00c      	beq.n	80025cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b2:	4b85      	ldr	r3, [pc, #532]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d112      	bne.n	80025e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025be:	4b82      	ldr	r3, [pc, #520]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ca:	d10b      	bne.n	80025e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	4b7e      	ldr	r3, [pc, #504]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d05b      	beq.n	8002690 <HAL_RCC_OscConfig+0x108>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d157      	bne.n	8002690 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e242      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ec:	d106      	bne.n	80025fc <HAL_RCC_OscConfig+0x74>
 80025ee:	4b76      	ldr	r3, [pc, #472]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a75      	ldr	r2, [pc, #468]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 80025f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	e01d      	b.n	8002638 <HAL_RCC_OscConfig+0xb0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x98>
 8002606:	4b70      	ldr	r3, [pc, #448]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6f      	ldr	r2, [pc, #444]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 800260c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4b6d      	ldr	r3, [pc, #436]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a6c      	ldr	r2, [pc, #432]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002618:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261c:	6013      	str	r3, [r2, #0]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0xb0>
 8002620:	4b69      	ldr	r3, [pc, #420]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a68      	ldr	r2, [pc, #416]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	4b66      	ldr	r3, [pc, #408]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a65      	ldr	r2, [pc, #404]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002632:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002636:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d013      	beq.n	8002668 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff f904 	bl	800184c <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002648:	f7ff f900 	bl	800184c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	@ 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e207      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800265a:	4b5b      	ldr	r3, [pc, #364]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d0f0      	beq.n	8002648 <HAL_RCC_OscConfig+0xc0>
 8002666:	e014      	b.n	8002692 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7ff f8f0 	bl	800184c <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002670:	f7ff f8ec 	bl	800184c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	@ 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e1f3      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002682:	4b51      	ldr	r3, [pc, #324]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0xe8>
 800268e:	e000      	b.n	8002692 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002690:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d063      	beq.n	8002766 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800269e:	4b4a      	ldr	r3, [pc, #296]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026aa:	4b47      	ldr	r3, [pc, #284]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d11c      	bne.n	80026f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b6:	4b44      	ldr	r3, [pc, #272]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d116      	bne.n	80026f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026c2:	4b41      	ldr	r3, [pc, #260]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_RCC_OscConfig+0x152>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d001      	beq.n	80026da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e1c7      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026da:	4b3b      	ldr	r3, [pc, #236]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	4937      	ldr	r1, [pc, #220]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ee:	e03a      	b.n	8002766 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f8:	4b34      	ldr	r3, [pc, #208]	@ (80027cc <HAL_RCC_OscConfig+0x244>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fe:	f7ff f8a5 	bl	800184c <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002706:	f7ff f8a1 	bl	800184c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1a8      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002718:	4b2b      	ldr	r3, [pc, #172]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f0      	beq.n	8002706 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002724:	4b28      	ldr	r3, [pc, #160]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4925      	ldr	r1, [pc, #148]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
 8002738:	e015      	b.n	8002766 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800273a:	4b24      	ldr	r3, [pc, #144]	@ (80027cc <HAL_RCC_OscConfig+0x244>)
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7ff f884 	bl	800184c <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002748:	f7ff f880 	bl	800184c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e187      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800275a:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d036      	beq.n	80027e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d016      	beq.n	80027a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800277a:	4b15      	ldr	r3, [pc, #84]	@ (80027d0 <HAL_RCC_OscConfig+0x248>)
 800277c:	2201      	movs	r2, #1
 800277e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002780:	f7ff f864 	bl	800184c <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002788:	f7ff f860 	bl	800184c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e167      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800279a:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <HAL_RCC_OscConfig+0x240>)
 800279c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x200>
 80027a6:	e01b      	b.n	80027e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a8:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <HAL_RCC_OscConfig+0x248>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ae:	f7ff f84d 	bl	800184c <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b4:	e00e      	b.n	80027d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b6:	f7ff f849 	bl	800184c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d907      	bls.n	80027d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e150      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
 80027c8:	40023800 	.word	0x40023800
 80027cc:	42470000 	.word	0x42470000
 80027d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d4:	4b88      	ldr	r3, [pc, #544]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 80027d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1ea      	bne.n	80027b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f000 8097 	beq.w	800291c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027f2:	4b81      	ldr	r3, [pc, #516]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10f      	bne.n	800281e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	4b7d      	ldr	r3, [pc, #500]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	4a7c      	ldr	r2, [pc, #496]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800280c:	6413      	str	r3, [r2, #64]	@ 0x40
 800280e:	4b7a      	ldr	r3, [pc, #488]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800281a:	2301      	movs	r3, #1
 800281c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b77      	ldr	r3, [pc, #476]	@ (80029fc <HAL_RCC_OscConfig+0x474>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d118      	bne.n	800285c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800282a:	4b74      	ldr	r3, [pc, #464]	@ (80029fc <HAL_RCC_OscConfig+0x474>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a73      	ldr	r2, [pc, #460]	@ (80029fc <HAL_RCC_OscConfig+0x474>)
 8002830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002834:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002836:	f7ff f809 	bl	800184c <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283e:	f7ff f805 	bl	800184c <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e10c      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002850:	4b6a      	ldr	r3, [pc, #424]	@ (80029fc <HAL_RCC_OscConfig+0x474>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x2ea>
 8002864:	4b64      	ldr	r3, [pc, #400]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	4a63      	ldr	r2, [pc, #396]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002870:	e01c      	b.n	80028ac <HAL_RCC_OscConfig+0x324>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b05      	cmp	r3, #5
 8002878:	d10c      	bne.n	8002894 <HAL_RCC_OscConfig+0x30c>
 800287a:	4b5f      	ldr	r3, [pc, #380]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287e:	4a5e      	ldr	r2, [pc, #376]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6713      	str	r3, [r2, #112]	@ 0x70
 8002886:	4b5c      	ldr	r3, [pc, #368]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288a:	4a5b      	ldr	r2, [pc, #364]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6713      	str	r3, [r2, #112]	@ 0x70
 8002892:	e00b      	b.n	80028ac <HAL_RCC_OscConfig+0x324>
 8002894:	4b58      	ldr	r3, [pc, #352]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002898:	4a57      	ldr	r2, [pc, #348]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a0:	4b55      	ldr	r3, [pc, #340]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 80028a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a4:	4a54      	ldr	r2, [pc, #336]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 80028a6:	f023 0304 	bic.w	r3, r3, #4
 80028aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d015      	beq.n	80028e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b4:	f7fe ffca 	bl	800184c <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028bc:	f7fe ffc6 	bl	800184c <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e0cb      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d2:	4b49      	ldr	r3, [pc, #292]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 80028d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0ee      	beq.n	80028bc <HAL_RCC_OscConfig+0x334>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e0:	f7fe ffb4 	bl	800184c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7fe ffb0 	bl	800184c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e0b5      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028fe:	4b3e      	ldr	r3, [pc, #248]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ee      	bne.n	80028e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800290a:	7dfb      	ldrb	r3, [r7, #23]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002910:	4b39      	ldr	r3, [pc, #228]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002914:	4a38      	ldr	r2, [pc, #224]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800291a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80a1 	beq.w	8002a68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002926:	4b34      	ldr	r3, [pc, #208]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b08      	cmp	r3, #8
 8002930:	d05c      	beq.n	80029ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d141      	bne.n	80029be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293a:	4b31      	ldr	r3, [pc, #196]	@ (8002a00 <HAL_RCC_OscConfig+0x478>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe ff84 	bl	800184c <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe ff80 	bl	800184c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e087      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	4b27      	ldr	r3, [pc, #156]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69da      	ldr	r2, [r3, #28]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002974:	019b      	lsls	r3, r3, #6
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	3b01      	subs	r3, #1
 8002980:	041b      	lsls	r3, r3, #16
 8002982:	431a      	orrs	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002988:	061b      	lsls	r3, r3, #24
 800298a:	491b      	ldr	r1, [pc, #108]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002990:	4b1b      	ldr	r3, [pc, #108]	@ (8002a00 <HAL_RCC_OscConfig+0x478>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe ff59 	bl	800184c <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299e:	f7fe ff55 	bl	800184c <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e05c      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029b0:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x416>
 80029bc:	e054      	b.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <HAL_RCC_OscConfig+0x478>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c4:	f7fe ff42 	bl	800184c <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe ff3e 	bl	800184c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e045      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_RCC_OscConfig+0x470>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x444>
 80029ea:	e03d      	b.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d107      	bne.n	8002a04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e038      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40007000 	.word	0x40007000
 8002a00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a04:	4b1b      	ldr	r3, [pc, #108]	@ (8002a74 <HAL_RCC_OscConfig+0x4ec>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d028      	beq.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d121      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d11a      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a34:	4013      	ands	r3, r2
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d111      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d107      	bne.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800

08002a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0cc      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a8c:	4b68      	ldr	r3, [pc, #416]	@ (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d90c      	bls.n	8002ab4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a9a:	4b65      	ldr	r3, [pc, #404]	@ (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	4b63      	ldr	r3, [pc, #396]	@ (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d001      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0b8      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d020      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002acc:	4b59      	ldr	r3, [pc, #356]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a58      	ldr	r2, [pc, #352]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ad6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ae4:	4b53      	ldr	r3, [pc, #332]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a52      	ldr	r2, [pc, #328]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002aee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af0:	4b50      	ldr	r3, [pc, #320]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	494d      	ldr	r1, [pc, #308]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d044      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b16:	4b47      	ldr	r3, [pc, #284]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d119      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e07f      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d107      	bne.n	8002b46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b36:	4b3f      	ldr	r3, [pc, #252]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e06f      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b46:	4b3b      	ldr	r3, [pc, #236]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e067      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b56:	4b37      	ldr	r3, [pc, #220]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f023 0203 	bic.w	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4934      	ldr	r1, [pc, #208]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b68:	f7fe fe70 	bl	800184c <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6e:	e00a      	b.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b70:	f7fe fe6c 	bl	800184c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e04f      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b86:	4b2b      	ldr	r3, [pc, #172]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 020c 	and.w	r2, r3, #12
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d1eb      	bne.n	8002b70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b98:	4b25      	ldr	r3, [pc, #148]	@ (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d20c      	bcs.n	8002bc0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba6:	4b22      	ldr	r3, [pc, #136]	@ (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bae:	4b20      	ldr	r3, [pc, #128]	@ (8002c30 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e032      	b.n	8002c26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0304 	and.w	r3, r3, #4
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bcc:	4b19      	ldr	r3, [pc, #100]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	4916      	ldr	r1, [pc, #88]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d009      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bea:	4b12      	ldr	r3, [pc, #72]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	490e      	ldr	r1, [pc, #56]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bfe:	f000 f821 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002c02:	4602      	mov	r2, r0
 8002c04:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	490a      	ldr	r1, [pc, #40]	@ (8002c38 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	5ccb      	ldrb	r3, [r1, r3]
 8002c12:	fa22 f303 	lsr.w	r3, r2, r3
 8002c16:	4a09      	ldr	r2, [pc, #36]	@ (8002c3c <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c1a:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe fdd0 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023c00 	.word	0x40023c00
 8002c34:	40023800 	.word	0x40023800
 8002c38:	08003ad4 	.word	0x08003ad4
 8002c3c:	20000004 	.word	0x20000004
 8002c40:	20000008 	.word	0x20000008

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c48:	b090      	sub	sp, #64	@ 0x40
 8002c4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c5c:	4b59      	ldr	r3, [pc, #356]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d00d      	beq.n	8002c84 <HAL_RCC_GetSysClockFreq+0x40>
 8002c68:	2b08      	cmp	r3, #8
 8002c6a:	f200 80a1 	bhi.w	8002db0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x34>
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d003      	beq.n	8002c7e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c76:	e09b      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c78:	4b53      	ldr	r3, [pc, #332]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c7c:	e09b      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c7e:	4b53      	ldr	r3, [pc, #332]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8002c80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c82:	e098      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c84:	4b4f      	ldr	r3, [pc, #316]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c8e:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d028      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	623b      	str	r3, [r7, #32]
 8002ca4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cac:	2100      	movs	r1, #0
 8002cae:	4b47      	ldr	r3, [pc, #284]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8002cb0:	fb03 f201 	mul.w	r2, r3, r1
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	fb00 f303 	mul.w	r3, r0, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	4a43      	ldr	r2, [pc, #268]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x188>)
 8002cbe:	fba0 1202 	umull	r1, r2, r0, r2
 8002cc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cc4:	460a      	mov	r2, r1
 8002cc6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002cc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cca:	4413      	add	r3, r2
 8002ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	61fa      	str	r2, [r7, #28]
 8002cd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cde:	f7fd ff37 	bl	8000b50 <__aeabi_uldivmod>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cea:	e053      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cec:	4b35      	ldr	r3, [pc, #212]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	617a      	str	r2, [r7, #20]
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cfe:	f04f 0b00 	mov.w	fp, #0
 8002d02:	4652      	mov	r2, sl
 8002d04:	465b      	mov	r3, fp
 8002d06:	f04f 0000 	mov.w	r0, #0
 8002d0a:	f04f 0100 	mov.w	r1, #0
 8002d0e:	0159      	lsls	r1, r3, #5
 8002d10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d14:	0150      	lsls	r0, r2, #5
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	ebb2 080a 	subs.w	r8, r2, sl
 8002d1e:	eb63 090b 	sbc.w	r9, r3, fp
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d36:	ebb2 0408 	subs.w	r4, r2, r8
 8002d3a:	eb63 0509 	sbc.w	r5, r3, r9
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	00eb      	lsls	r3, r5, #3
 8002d48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4c:	00e2      	lsls	r2, r4, #3
 8002d4e:	4614      	mov	r4, r2
 8002d50:	461d      	mov	r5, r3
 8002d52:	eb14 030a 	adds.w	r3, r4, sl
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	eb45 030b 	adc.w	r3, r5, fp
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	028b      	lsls	r3, r1, #10
 8002d6e:	4621      	mov	r1, r4
 8002d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d74:	4621      	mov	r1, r4
 8002d76:	028a      	lsls	r2, r1, #10
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60bb      	str	r3, [r7, #8]
 8002d82:	60fa      	str	r2, [r7, #12]
 8002d84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d88:	f7fd fee2 	bl	8000b50 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4613      	mov	r3, r2
 8002d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002da4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002db2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3740      	adds	r7, #64	@ 0x40
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	00f42400 	.word	0x00f42400
 8002dcc:	017d7840 	.word	0x017d7840

08002dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e041      	b.n	8002e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fe fc30 	bl	800165c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f000 fa7a 	bl	8003308 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d001      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e044      	b.n	8002f12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f20 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d018      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x6c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb2:	d013      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x6c>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8002f24 <HAL_TIM_Base_Start_IT+0xb4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00e      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x6c>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a19      	ldr	r2, [pc, #100]	@ (8002f28 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x6c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a17      	ldr	r2, [pc, #92]	@ (8002f2c <HAL_TIM_Base_Start_IT+0xbc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0x6c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a16      	ldr	r2, [pc, #88]	@ (8002f30 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d111      	bne.n	8002f00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d010      	beq.n	8002f10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0201 	orr.w	r2, r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efe:	e007      	b.n	8002f10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40010000 	.word	0x40010000
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40000800 	.word	0x40000800
 8002f2c:	40000c00 	.word	0x40000c00
 8002f30:	40014000 	.word	0x40014000

08002f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d020      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01b      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0202 	mvn.w	r2, #2
 8002f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f9a3 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f995 	bl	80032b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f9a6 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 0304 	and.w	r3, r3, #4
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d020      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01b      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0204 	mvn.w	r2, #4
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2202      	movs	r2, #2
 8002fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f97d 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f96f 	bl	80032b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f980 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d020      	beq.n	8003030 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01b      	beq.n	8003030 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0208 	mvn.w	r2, #8
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2204      	movs	r2, #4
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f957 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f949 	bl	80032b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f95a 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	d020      	beq.n	800307c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0210 	mvn.w	r2, #16
 800304c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2208      	movs	r2, #8
 8003052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f931 	bl	80032ca <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f923 	bl	80032b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f934 	bl	80032de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00c      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d007      	beq.n	80030a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0201 	mvn.w	r2, #1
 8003098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f901 	bl	80032a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00c      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fac0 	bl	8003644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f905 	bl	80032f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00c      	beq.n	800310c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0220 	mvn.w	r2, #32
 8003104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fa92 	bl	8003630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800310c:	bf00      	nop
 800310e:	3710      	adds	r7, #16
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_TIM_ConfigClockSource+0x1c>
 800312c:	2302      	movs	r3, #2
 800312e:	e0b4      	b.n	800329a <HAL_TIM_ConfigClockSource+0x186>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800314e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003168:	d03e      	beq.n	80031e8 <HAL_TIM_ConfigClockSource+0xd4>
 800316a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800316e:	f200 8087 	bhi.w	8003280 <HAL_TIM_ConfigClockSource+0x16c>
 8003172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003176:	f000 8086 	beq.w	8003286 <HAL_TIM_ConfigClockSource+0x172>
 800317a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800317e:	d87f      	bhi.n	8003280 <HAL_TIM_ConfigClockSource+0x16c>
 8003180:	2b70      	cmp	r3, #112	@ 0x70
 8003182:	d01a      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0xa6>
 8003184:	2b70      	cmp	r3, #112	@ 0x70
 8003186:	d87b      	bhi.n	8003280 <HAL_TIM_ConfigClockSource+0x16c>
 8003188:	2b60      	cmp	r3, #96	@ 0x60
 800318a:	d050      	beq.n	800322e <HAL_TIM_ConfigClockSource+0x11a>
 800318c:	2b60      	cmp	r3, #96	@ 0x60
 800318e:	d877      	bhi.n	8003280 <HAL_TIM_ConfigClockSource+0x16c>
 8003190:	2b50      	cmp	r3, #80	@ 0x50
 8003192:	d03c      	beq.n	800320e <HAL_TIM_ConfigClockSource+0xfa>
 8003194:	2b50      	cmp	r3, #80	@ 0x50
 8003196:	d873      	bhi.n	8003280 <HAL_TIM_ConfigClockSource+0x16c>
 8003198:	2b40      	cmp	r3, #64	@ 0x40
 800319a:	d058      	beq.n	800324e <HAL_TIM_ConfigClockSource+0x13a>
 800319c:	2b40      	cmp	r3, #64	@ 0x40
 800319e:	d86f      	bhi.n	8003280 <HAL_TIM_ConfigClockSource+0x16c>
 80031a0:	2b30      	cmp	r3, #48	@ 0x30
 80031a2:	d064      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x15a>
 80031a4:	2b30      	cmp	r3, #48	@ 0x30
 80031a6:	d86b      	bhi.n	8003280 <HAL_TIM_ConfigClockSource+0x16c>
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d060      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x15a>
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d867      	bhi.n	8003280 <HAL_TIM_ConfigClockSource+0x16c>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d05c      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x15a>
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d05a      	beq.n	800326e <HAL_TIM_ConfigClockSource+0x15a>
 80031b8:	e062      	b.n	8003280 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031ca:	f000 f9a3 	bl	8003514 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	609a      	str	r2, [r3, #8]
      break;
 80031e6:	e04f      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031f8:	f000 f98c 	bl	8003514 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800320a:	609a      	str	r2, [r3, #8]
      break;
 800320c:	e03c      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800321a:	461a      	mov	r2, r3
 800321c:	f000 f900 	bl	8003420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2150      	movs	r1, #80	@ 0x50
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f959 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 800322c:	e02c      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800323a:	461a      	mov	r2, r3
 800323c:	f000 f91f 	bl	800347e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2160      	movs	r1, #96	@ 0x60
 8003246:	4618      	mov	r0, r3
 8003248:	f000 f949 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 800324c:	e01c      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800325a:	461a      	mov	r2, r3
 800325c:	f000 f8e0 	bl	8003420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2140      	movs	r1, #64	@ 0x40
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f939 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 800326c:	e00c      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f000 f930 	bl	80034de <TIM_ITRx_SetConfig>
      break;
 800327e:	e003      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      break;
 8003284:	e000      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003298:	7bfb      	ldrb	r3, [r7, #15]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a3a      	ldr	r2, [pc, #232]	@ (8003404 <TIM_Base_SetConfig+0xfc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00f      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003326:	d00b      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a37      	ldr	r2, [pc, #220]	@ (8003408 <TIM_Base_SetConfig+0x100>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d007      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a36      	ldr	r2, [pc, #216]	@ (800340c <TIM_Base_SetConfig+0x104>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d003      	beq.n	8003340 <TIM_Base_SetConfig+0x38>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a35      	ldr	r2, [pc, #212]	@ (8003410 <TIM_Base_SetConfig+0x108>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d108      	bne.n	8003352 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2b      	ldr	r2, [pc, #172]	@ (8003404 <TIM_Base_SetConfig+0xfc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d01b      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003360:	d017      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a28      	ldr	r2, [pc, #160]	@ (8003408 <TIM_Base_SetConfig+0x100>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a27      	ldr	r2, [pc, #156]	@ (800340c <TIM_Base_SetConfig+0x104>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d00f      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a26      	ldr	r2, [pc, #152]	@ (8003410 <TIM_Base_SetConfig+0x108>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d00b      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a25      	ldr	r2, [pc, #148]	@ (8003414 <TIM_Base_SetConfig+0x10c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d007      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a24      	ldr	r2, [pc, #144]	@ (8003418 <TIM_Base_SetConfig+0x110>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d003      	beq.n	8003392 <TIM_Base_SetConfig+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a23      	ldr	r2, [pc, #140]	@ (800341c <TIM_Base_SetConfig+0x114>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d108      	bne.n	80033a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003404 <TIM_Base_SetConfig+0xfc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d103      	bne.n	80033d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d105      	bne.n	80033f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f023 0201 	bic.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	611a      	str	r2, [r3, #16]
  }
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40010000 	.word	0x40010000
 8003408:	40000400 	.word	0x40000400
 800340c:	40000800 	.word	0x40000800
 8003410:	40000c00 	.word	0x40000c00
 8003414:	40014000 	.word	0x40014000
 8003418:	40014400 	.word	0x40014400
 800341c:	40014800 	.word	0x40014800

08003420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003420:	b480      	push	{r7}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0201 	bic.w	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800344a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f023 030a 	bic.w	r3, r3, #10
 800345c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4313      	orrs	r3, r2
 8003464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	621a      	str	r2, [r3, #32]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800347e:	b480      	push	{r7}
 8003480:	b087      	sub	sp, #28
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f023 0210 	bic.w	r2, r3, #16
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	031b      	lsls	r3, r3, #12
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	621a      	str	r2, [r3, #32]
}
 80034d2:	bf00      	nop
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034de:	b480      	push	{r7}
 80034e0:	b085      	sub	sp, #20
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f043 0307 	orr.w	r3, r3, #7
 8003500:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	609a      	str	r2, [r3, #8]
}
 8003508:	bf00      	nop
 800350a:	3714      	adds	r7, #20
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800352e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	021a      	lsls	r2, r3, #8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	431a      	orrs	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4313      	orrs	r3, r2
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003564:	2b01      	cmp	r3, #1
 8003566:	d101      	bne.n	800356c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003568:	2302      	movs	r3, #2
 800356a:	e050      	b.n	800360e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a1c      	ldr	r2, [pc, #112]	@ (800361c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d018      	beq.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b8:	d013      	beq.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a18      	ldr	r2, [pc, #96]	@ (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00e      	beq.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a16      	ldr	r2, [pc, #88]	@ (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d009      	beq.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a15      	ldr	r2, [pc, #84]	@ (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d004      	beq.n	80035e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a13      	ldr	r2, [pc, #76]	@ (800362c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d10c      	bne.n	80035fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40010000 	.word	0x40010000
 8003620:	40000400 	.word	0x40000400
 8003624:	40000800 	.word	0x40000800
 8003628:	40000c00 	.word	0x40000c00
 800362c:	40014000 	.word	0x40014000

08003630 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <memset>:
 8003658:	4402      	add	r2, r0
 800365a:	4603      	mov	r3, r0
 800365c:	4293      	cmp	r3, r2
 800365e:	d100      	bne.n	8003662 <memset+0xa>
 8003660:	4770      	bx	lr
 8003662:	f803 1b01 	strb.w	r1, [r3], #1
 8003666:	e7f9      	b.n	800365c <memset+0x4>

08003668 <__errno>:
 8003668:	4b01      	ldr	r3, [pc, #4]	@ (8003670 <__errno+0x8>)
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000010 	.word	0x20000010

08003674 <__libc_init_array>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	4d0d      	ldr	r5, [pc, #52]	@ (80036ac <__libc_init_array+0x38>)
 8003678:	4c0d      	ldr	r4, [pc, #52]	@ (80036b0 <__libc_init_array+0x3c>)
 800367a:	1b64      	subs	r4, r4, r5
 800367c:	10a4      	asrs	r4, r4, #2
 800367e:	2600      	movs	r6, #0
 8003680:	42a6      	cmp	r6, r4
 8003682:	d109      	bne.n	8003698 <__libc_init_array+0x24>
 8003684:	4d0b      	ldr	r5, [pc, #44]	@ (80036b4 <__libc_init_array+0x40>)
 8003686:	4c0c      	ldr	r4, [pc, #48]	@ (80036b8 <__libc_init_array+0x44>)
 8003688:	f000 fa18 	bl	8003abc <_init>
 800368c:	1b64      	subs	r4, r4, r5
 800368e:	10a4      	asrs	r4, r4, #2
 8003690:	2600      	movs	r6, #0
 8003692:	42a6      	cmp	r6, r4
 8003694:	d105      	bne.n	80036a2 <__libc_init_array+0x2e>
 8003696:	bd70      	pop	{r4, r5, r6, pc}
 8003698:	f855 3b04 	ldr.w	r3, [r5], #4
 800369c:	4798      	blx	r3
 800369e:	3601      	adds	r6, #1
 80036a0:	e7ee      	b.n	8003680 <__libc_init_array+0xc>
 80036a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a6:	4798      	blx	r3
 80036a8:	3601      	adds	r6, #1
 80036aa:	e7f2      	b.n	8003692 <__libc_init_array+0x1e>
 80036ac:	08003af0 	.word	0x08003af0
 80036b0:	08003af0 	.word	0x08003af0
 80036b4:	08003af0 	.word	0x08003af0
 80036b8:	08003af4 	.word	0x08003af4
 80036bc:	00000000 	.word	0x00000000

080036c0 <log>:
 80036c0:	b538      	push	{r3, r4, r5, lr}
 80036c2:	ed2d 8b02 	vpush	{d8}
 80036c6:	ec55 4b10 	vmov	r4, r5, d0
 80036ca:	f000 f841 	bl	8003750 <__ieee754_log>
 80036ce:	4622      	mov	r2, r4
 80036d0:	462b      	mov	r3, r5
 80036d2:	4620      	mov	r0, r4
 80036d4:	4629      	mov	r1, r5
 80036d6:	eeb0 8a40 	vmov.f32	s16, s0
 80036da:	eef0 8a60 	vmov.f32	s17, s1
 80036de:	f7fd f9d1 	bl	8000a84 <__aeabi_dcmpun>
 80036e2:	b998      	cbnz	r0, 800370c <log+0x4c>
 80036e4:	2200      	movs	r2, #0
 80036e6:	2300      	movs	r3, #0
 80036e8:	4620      	mov	r0, r4
 80036ea:	4629      	mov	r1, r5
 80036ec:	f7fd f9c0 	bl	8000a70 <__aeabi_dcmpgt>
 80036f0:	b960      	cbnz	r0, 800370c <log+0x4c>
 80036f2:	2200      	movs	r2, #0
 80036f4:	2300      	movs	r3, #0
 80036f6:	4620      	mov	r0, r4
 80036f8:	4629      	mov	r1, r5
 80036fa:	f7fd f991 	bl	8000a20 <__aeabi_dcmpeq>
 80036fe:	b160      	cbz	r0, 800371a <log+0x5a>
 8003700:	f7ff ffb2 	bl	8003668 <__errno>
 8003704:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8003730 <log+0x70>
 8003708:	2322      	movs	r3, #34	@ 0x22
 800370a:	6003      	str	r3, [r0, #0]
 800370c:	eeb0 0a48 	vmov.f32	s0, s16
 8003710:	eef0 0a68 	vmov.f32	s1, s17
 8003714:	ecbd 8b02 	vpop	{d8}
 8003718:	bd38      	pop	{r3, r4, r5, pc}
 800371a:	f7ff ffa5 	bl	8003668 <__errno>
 800371e:	ecbd 8b02 	vpop	{d8}
 8003722:	2321      	movs	r3, #33	@ 0x21
 8003724:	6003      	str	r3, [r0, #0]
 8003726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800372a:	4803      	ldr	r0, [pc, #12]	@ (8003738 <log+0x78>)
 800372c:	f000 b808 	b.w	8003740 <nan>
 8003730:	00000000 	.word	0x00000000
 8003734:	fff00000 	.word	0xfff00000
 8003738:	08003ae4 	.word	0x08003ae4
 800373c:	00000000 	.word	0x00000000

08003740 <nan>:
 8003740:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8003748 <nan+0x8>
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	00000000 	.word	0x00000000
 800374c:	7ff80000 	.word	0x7ff80000

08003750 <__ieee754_log>:
 8003750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003754:	ec51 0b10 	vmov	r0, r1, d0
 8003758:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800375c:	b087      	sub	sp, #28
 800375e:	460d      	mov	r5, r1
 8003760:	da26      	bge.n	80037b0 <__ieee754_log+0x60>
 8003762:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003766:	4303      	orrs	r3, r0
 8003768:	4602      	mov	r2, r0
 800376a:	d10a      	bne.n	8003782 <__ieee754_log+0x32>
 800376c:	49ce      	ldr	r1, [pc, #824]	@ (8003aa8 <__ieee754_log+0x358>)
 800376e:	2200      	movs	r2, #0
 8003770:	2300      	movs	r3, #0
 8003772:	2000      	movs	r0, #0
 8003774:	f7fd f816 	bl	80007a4 <__aeabi_ddiv>
 8003778:	ec41 0b10 	vmov	d0, r0, r1
 800377c:	b007      	add	sp, #28
 800377e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003782:	2900      	cmp	r1, #0
 8003784:	da05      	bge.n	8003792 <__ieee754_log+0x42>
 8003786:	460b      	mov	r3, r1
 8003788:	f7fc fd2a 	bl	80001e0 <__aeabi_dsub>
 800378c:	2200      	movs	r2, #0
 800378e:	2300      	movs	r3, #0
 8003790:	e7f0      	b.n	8003774 <__ieee754_log+0x24>
 8003792:	4bc6      	ldr	r3, [pc, #792]	@ (8003aac <__ieee754_log+0x35c>)
 8003794:	2200      	movs	r2, #0
 8003796:	f7fc fedb 	bl	8000550 <__aeabi_dmul>
 800379a:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 800379e:	460d      	mov	r5, r1
 80037a0:	4ac3      	ldr	r2, [pc, #780]	@ (8003ab0 <__ieee754_log+0x360>)
 80037a2:	4295      	cmp	r5, r2
 80037a4:	dd06      	ble.n	80037b4 <__ieee754_log+0x64>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	f7fc fd1b 	bl	80001e4 <__adddf3>
 80037ae:	e7e3      	b.n	8003778 <__ieee754_log+0x28>
 80037b0:	2300      	movs	r3, #0
 80037b2:	e7f5      	b.n	80037a0 <__ieee754_log+0x50>
 80037b4:	152c      	asrs	r4, r5, #20
 80037b6:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80037ba:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80037be:	441c      	add	r4, r3
 80037c0:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 80037c4:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 80037c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037cc:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 80037d0:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 80037d4:	ea42 0105 	orr.w	r1, r2, r5
 80037d8:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80037dc:	2200      	movs	r2, #0
 80037de:	4bb5      	ldr	r3, [pc, #724]	@ (8003ab4 <__ieee754_log+0x364>)
 80037e0:	f7fc fcfe 	bl	80001e0 <__aeabi_dsub>
 80037e4:	1cab      	adds	r3, r5, #2
 80037e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	4682      	mov	sl, r0
 80037ee:	468b      	mov	fp, r1
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	dc53      	bgt.n	800389e <__ieee754_log+0x14e>
 80037f6:	2300      	movs	r3, #0
 80037f8:	f7fd f912 	bl	8000a20 <__aeabi_dcmpeq>
 80037fc:	b1d0      	cbz	r0, 8003834 <__ieee754_log+0xe4>
 80037fe:	2c00      	cmp	r4, #0
 8003800:	f000 8120 	beq.w	8003a44 <__ieee754_log+0x2f4>
 8003804:	4620      	mov	r0, r4
 8003806:	f7fc fe39 	bl	800047c <__aeabi_i2d>
 800380a:	a391      	add	r3, pc, #580	@ (adr r3, 8003a50 <__ieee754_log+0x300>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	4606      	mov	r6, r0
 8003812:	460f      	mov	r7, r1
 8003814:	f7fc fe9c 	bl	8000550 <__aeabi_dmul>
 8003818:	a38f      	add	r3, pc, #572	@ (adr r3, 8003a58 <__ieee754_log+0x308>)
 800381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381e:	4604      	mov	r4, r0
 8003820:	460d      	mov	r5, r1
 8003822:	4630      	mov	r0, r6
 8003824:	4639      	mov	r1, r7
 8003826:	f7fc fe93 	bl	8000550 <__aeabi_dmul>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4620      	mov	r0, r4
 8003830:	4629      	mov	r1, r5
 8003832:	e7ba      	b.n	80037aa <__ieee754_log+0x5a>
 8003834:	a38a      	add	r3, pc, #552	@ (adr r3, 8003a60 <__ieee754_log+0x310>)
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	4650      	mov	r0, sl
 800383c:	4659      	mov	r1, fp
 800383e:	f7fc fe87 	bl	8000550 <__aeabi_dmul>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	2000      	movs	r0, #0
 8003848:	499b      	ldr	r1, [pc, #620]	@ (8003ab8 <__ieee754_log+0x368>)
 800384a:	f7fc fcc9 	bl	80001e0 <__aeabi_dsub>
 800384e:	4652      	mov	r2, sl
 8003850:	4606      	mov	r6, r0
 8003852:	460f      	mov	r7, r1
 8003854:	465b      	mov	r3, fp
 8003856:	4650      	mov	r0, sl
 8003858:	4659      	mov	r1, fp
 800385a:	f7fc fe79 	bl	8000550 <__aeabi_dmul>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4630      	mov	r0, r6
 8003864:	4639      	mov	r1, r7
 8003866:	f7fc fe73 	bl	8000550 <__aeabi_dmul>
 800386a:	4606      	mov	r6, r0
 800386c:	460f      	mov	r7, r1
 800386e:	b914      	cbnz	r4, 8003876 <__ieee754_log+0x126>
 8003870:	4632      	mov	r2, r6
 8003872:	463b      	mov	r3, r7
 8003874:	e0a0      	b.n	80039b8 <__ieee754_log+0x268>
 8003876:	4620      	mov	r0, r4
 8003878:	f7fc fe00 	bl	800047c <__aeabi_i2d>
 800387c:	a374      	add	r3, pc, #464	@ (adr r3, 8003a50 <__ieee754_log+0x300>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	4680      	mov	r8, r0
 8003884:	4689      	mov	r9, r1
 8003886:	f7fc fe63 	bl	8000550 <__aeabi_dmul>
 800388a:	a373      	add	r3, pc, #460	@ (adr r3, 8003a58 <__ieee754_log+0x308>)
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	4604      	mov	r4, r0
 8003892:	460d      	mov	r5, r1
 8003894:	4640      	mov	r0, r8
 8003896:	4649      	mov	r1, r9
 8003898:	f7fc fe5a 	bl	8000550 <__aeabi_dmul>
 800389c:	e0a5      	b.n	80039ea <__ieee754_log+0x29a>
 800389e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80038a2:	f7fc fc9f 	bl	80001e4 <__adddf3>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4650      	mov	r0, sl
 80038ac:	4659      	mov	r1, fp
 80038ae:	f7fc ff79 	bl	80007a4 <__aeabi_ddiv>
 80038b2:	e9cd 0100 	strd	r0, r1, [sp]
 80038b6:	4620      	mov	r0, r4
 80038b8:	f7fc fde0 	bl	800047c <__aeabi_i2d>
 80038bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038c4:	4610      	mov	r0, r2
 80038c6:	4619      	mov	r1, r3
 80038c8:	f7fc fe42 	bl	8000550 <__aeabi_dmul>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80038d4:	f7fc fe3c 	bl	8000550 <__aeabi_dmul>
 80038d8:	a363      	add	r3, pc, #396	@ (adr r3, 8003a68 <__ieee754_log+0x318>)
 80038da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038de:	4680      	mov	r8, r0
 80038e0:	4689      	mov	r9, r1
 80038e2:	f7fc fe35 	bl	8000550 <__aeabi_dmul>
 80038e6:	a362      	add	r3, pc, #392	@ (adr r3, 8003a70 <__ieee754_log+0x320>)
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f7fc fc7a 	bl	80001e4 <__adddf3>
 80038f0:	4642      	mov	r2, r8
 80038f2:	464b      	mov	r3, r9
 80038f4:	f7fc fe2c 	bl	8000550 <__aeabi_dmul>
 80038f8:	a35f      	add	r3, pc, #380	@ (adr r3, 8003a78 <__ieee754_log+0x328>)
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f7fc fc71 	bl	80001e4 <__adddf3>
 8003902:	4642      	mov	r2, r8
 8003904:	464b      	mov	r3, r9
 8003906:	f7fc fe23 	bl	8000550 <__aeabi_dmul>
 800390a:	a35d      	add	r3, pc, #372	@ (adr r3, 8003a80 <__ieee754_log+0x330>)
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f7fc fc68 	bl	80001e4 <__adddf3>
 8003914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003918:	f7fc fe1a 	bl	8000550 <__aeabi_dmul>
 800391c:	a35a      	add	r3, pc, #360	@ (adr r3, 8003a88 <__ieee754_log+0x338>)
 800391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003922:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003926:	4640      	mov	r0, r8
 8003928:	4649      	mov	r1, r9
 800392a:	f7fc fe11 	bl	8000550 <__aeabi_dmul>
 800392e:	a358      	add	r3, pc, #352	@ (adr r3, 8003a90 <__ieee754_log+0x340>)
 8003930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003934:	f7fc fc56 	bl	80001e4 <__adddf3>
 8003938:	4642      	mov	r2, r8
 800393a:	464b      	mov	r3, r9
 800393c:	f7fc fe08 	bl	8000550 <__aeabi_dmul>
 8003940:	a355      	add	r3, pc, #340	@ (adr r3, 8003a98 <__ieee754_log+0x348>)
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	f7fc fc4d 	bl	80001e4 <__adddf3>
 800394a:	4642      	mov	r2, r8
 800394c:	464b      	mov	r3, r9
 800394e:	f7fc fdff 	bl	8000550 <__aeabi_dmul>
 8003952:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800395e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003962:	f7fc fc3f 	bl	80001e4 <__adddf3>
 8003966:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800396a:	3551      	adds	r5, #81	@ 0x51
 800396c:	4335      	orrs	r5, r6
 800396e:	2d00      	cmp	r5, #0
 8003970:	4680      	mov	r8, r0
 8003972:	4689      	mov	r9, r1
 8003974:	dd48      	ble.n	8003a08 <__ieee754_log+0x2b8>
 8003976:	4b50      	ldr	r3, [pc, #320]	@ (8003ab8 <__ieee754_log+0x368>)
 8003978:	2200      	movs	r2, #0
 800397a:	4650      	mov	r0, sl
 800397c:	4659      	mov	r1, fp
 800397e:	f7fc fde7 	bl	8000550 <__aeabi_dmul>
 8003982:	4652      	mov	r2, sl
 8003984:	465b      	mov	r3, fp
 8003986:	f7fc fde3 	bl	8000550 <__aeabi_dmul>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4606      	mov	r6, r0
 8003990:	460f      	mov	r7, r1
 8003992:	4640      	mov	r0, r8
 8003994:	4649      	mov	r1, r9
 8003996:	f7fc fc25 	bl	80001e4 <__adddf3>
 800399a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800399e:	f7fc fdd7 	bl	8000550 <__aeabi_dmul>
 80039a2:	4680      	mov	r8, r0
 80039a4:	4689      	mov	r9, r1
 80039a6:	b964      	cbnz	r4, 80039c2 <__ieee754_log+0x272>
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4630      	mov	r0, r6
 80039ae:	4639      	mov	r1, r7
 80039b0:	f7fc fc16 	bl	80001e0 <__aeabi_dsub>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4650      	mov	r0, sl
 80039ba:	4659      	mov	r1, fp
 80039bc:	f7fc fc10 	bl	80001e0 <__aeabi_dsub>
 80039c0:	e6da      	b.n	8003778 <__ieee754_log+0x28>
 80039c2:	a323      	add	r3, pc, #140	@ (adr r3, 8003a50 <__ieee754_log+0x300>)
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039cc:	f7fc fdc0 	bl	8000550 <__aeabi_dmul>
 80039d0:	a321      	add	r3, pc, #132	@ (adr r3, 8003a58 <__ieee754_log+0x308>)
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	4604      	mov	r4, r0
 80039d8:	460d      	mov	r5, r1
 80039da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80039de:	f7fc fdb7 	bl	8000550 <__aeabi_dmul>
 80039e2:	4642      	mov	r2, r8
 80039e4:	464b      	mov	r3, r9
 80039e6:	f7fc fbfd 	bl	80001e4 <__adddf3>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4630      	mov	r0, r6
 80039f0:	4639      	mov	r1, r7
 80039f2:	f7fc fbf5 	bl	80001e0 <__aeabi_dsub>
 80039f6:	4652      	mov	r2, sl
 80039f8:	465b      	mov	r3, fp
 80039fa:	f7fc fbf1 	bl	80001e0 <__aeabi_dsub>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4620      	mov	r0, r4
 8003a04:	4629      	mov	r1, r5
 8003a06:	e7d9      	b.n	80039bc <__ieee754_log+0x26c>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4650      	mov	r0, sl
 8003a0e:	4659      	mov	r1, fp
 8003a10:	f7fc fbe6 	bl	80001e0 <__aeabi_dsub>
 8003a14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a18:	f7fc fd9a 	bl	8000550 <__aeabi_dmul>
 8003a1c:	4606      	mov	r6, r0
 8003a1e:	460f      	mov	r7, r1
 8003a20:	2c00      	cmp	r4, #0
 8003a22:	f43f af25 	beq.w	8003870 <__ieee754_log+0x120>
 8003a26:	a30a      	add	r3, pc, #40	@ (adr r3, 8003a50 <__ieee754_log+0x300>)
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a30:	f7fc fd8e 	bl	8000550 <__aeabi_dmul>
 8003a34:	a308      	add	r3, pc, #32	@ (adr r3, 8003a58 <__ieee754_log+0x308>)
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	460d      	mov	r5, r1
 8003a3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a42:	e729      	b.n	8003898 <__ieee754_log+0x148>
 8003a44:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8003aa0 <__ieee754_log+0x350>
 8003a48:	e698      	b.n	800377c <__ieee754_log+0x2c>
 8003a4a:	bf00      	nop
 8003a4c:	f3af 8000 	nop.w
 8003a50:	fee00000 	.word	0xfee00000
 8003a54:	3fe62e42 	.word	0x3fe62e42
 8003a58:	35793c76 	.word	0x35793c76
 8003a5c:	3dea39ef 	.word	0x3dea39ef
 8003a60:	55555555 	.word	0x55555555
 8003a64:	3fd55555 	.word	0x3fd55555
 8003a68:	df3e5244 	.word	0xdf3e5244
 8003a6c:	3fc2f112 	.word	0x3fc2f112
 8003a70:	96cb03de 	.word	0x96cb03de
 8003a74:	3fc74664 	.word	0x3fc74664
 8003a78:	94229359 	.word	0x94229359
 8003a7c:	3fd24924 	.word	0x3fd24924
 8003a80:	55555593 	.word	0x55555593
 8003a84:	3fe55555 	.word	0x3fe55555
 8003a88:	d078c69f 	.word	0xd078c69f
 8003a8c:	3fc39a09 	.word	0x3fc39a09
 8003a90:	1d8e78af 	.word	0x1d8e78af
 8003a94:	3fcc71c5 	.word	0x3fcc71c5
 8003a98:	9997fa04 	.word	0x9997fa04
 8003a9c:	3fd99999 	.word	0x3fd99999
	...
 8003aa8:	c3500000 	.word	0xc3500000
 8003aac:	43500000 	.word	0x43500000
 8003ab0:	7fefffff 	.word	0x7fefffff
 8003ab4:	3ff00000 	.word	0x3ff00000
 8003ab8:	3fe00000 	.word	0x3fe00000

08003abc <_init>:
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	bf00      	nop
 8003ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac2:	bc08      	pop	{r3}
 8003ac4:	469e      	mov	lr, r3
 8003ac6:	4770      	bx	lr

08003ac8 <_fini>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	bf00      	nop
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr
